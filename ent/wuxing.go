// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/wuxing"
)

// WuXing is the model entity for the WuXing schema.
type WuXing struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Created holds the value of the "created" field.
	Created time.Time `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated time.Time `json:"updated,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted time.Time `json:"deleted,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// First holds the value of the "first" field.
	First string `json:"first,omitempty"`
	// Second holds the value of the "second" field.
	Second string `json:"second,omitempty"`
	// Third holds the value of the "third" field.
	Third string `json:"third,omitempty"`
	// Fortune holds the value of the "fortune" field.
	Fortune string `json:"fortune,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WuXing) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wuxing.FieldVersion:
			values[i] = new(sql.NullInt64)
		case wuxing.FieldID, wuxing.FieldFirst, wuxing.FieldSecond, wuxing.FieldThird, wuxing.FieldFortune:
			values[i] = new(sql.NullString)
		case wuxing.FieldCreated, wuxing.FieldUpdated, wuxing.FieldDeleted:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WuXing", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WuXing fields.
func (wx *WuXing) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wuxing.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wx.ID = value.String
			}
		case wuxing.FieldCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				wx.Created = value.Time
			}
		case wuxing.FieldUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				wx.Updated = value.Time
			}
		case wuxing.FieldDeleted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				wx.Deleted = value.Time
			}
		case wuxing.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				wx.Version = int(value.Int64)
			}
		case wuxing.FieldFirst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first", values[i])
			} else if value.Valid {
				wx.First = value.String
			}
		case wuxing.FieldSecond:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field second", values[i])
			} else if value.Valid {
				wx.Second = value.String
			}
		case wuxing.FieldThird:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third", values[i])
			} else if value.Valid {
				wx.Third = value.String
			}
		case wuxing.FieldFortune:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fortune", values[i])
			} else if value.Valid {
				wx.Fortune = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this WuXing.
// Note that you need to call WuXing.Unwrap() before calling this method if this WuXing
// was returned from a transaction, and the transaction was committed or rolled back.
func (wx *WuXing) Update() *WuXingUpdateOne {
	return NewWuXingClient(wx.config).UpdateOne(wx)
}

// Unwrap unwraps the WuXing entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wx *WuXing) Unwrap() *WuXing {
	_tx, ok := wx.config.driver.(*txDriver)
	if !ok {
		panic("ent: WuXing is not a transactional entity")
	}
	wx.config.driver = _tx.drv
	return wx
}

// String implements the fmt.Stringer.
func (wx *WuXing) String() string {
	var builder strings.Builder
	builder.WriteString("WuXing(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wx.ID))
	builder.WriteString("created=")
	builder.WriteString(wx.Created.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated=")
	builder.WriteString(wx.Updated.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(wx.Deleted.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", wx.Version))
	builder.WriteString(", ")
	builder.WriteString("first=")
	builder.WriteString(wx.First)
	builder.WriteString(", ")
	builder.WriteString("second=")
	builder.WriteString(wx.Second)
	builder.WriteString(", ")
	builder.WriteString("third=")
	builder.WriteString(wx.Third)
	builder.WriteString(", ")
	builder.WriteString("fortune=")
	builder.WriteString(wx.Fortune)
	builder.WriteByte(')')
	return builder.String()
}

// WuXings is a parsable slice of WuXing.
type WuXings []*WuXing
