// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wuxing"
)

// WuXingDelete is the builder for deleting a WuXing entity.
type WuXingDelete struct {
	config
	hooks    []Hook
	mutation *WuXingMutation
}

// Where appends a list predicates to the WuXingDelete builder.
func (wxd *WuXingDelete) Where(ps ...predicate.WuXing) *WuXingDelete {
	wxd.mutation.Where(ps...)
	return wxd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wxd *WuXingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, WuXingMutation](ctx, wxd.sqlExec, wxd.mutation, wxd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wxd *WuXingDelete) ExecX(ctx context.Context) int {
	n, err := wxd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wxd *WuXingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wuxing.Table, sqlgraph.NewFieldSpec(wuxing.FieldID, field.TypeString))
	if ps := wxd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wxd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wxd.mutation.done = true
	return affected, err
}

// WuXingDeleteOne is the builder for deleting a single WuXing entity.
type WuXingDeleteOne struct {
	wxd *WuXingDelete
}

// Where appends a list predicates to the WuXingDelete builder.
func (wxdo *WuXingDeleteOne) Where(ps ...predicate.WuXing) *WuXingDeleteOne {
	wxdo.wxd.mutation.Where(ps...)
	return wxdo
}

// Exec executes the deletion query.
func (wxdo *WuXingDeleteOne) Exec(ctx context.Context) error {
	n, err := wxdo.wxd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wuxing.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wxdo *WuXingDeleteOne) ExecX(ctx context.Context) {
	if err := wxdo.Exec(ctx); err != nil {
		panic(err)
	}
}
