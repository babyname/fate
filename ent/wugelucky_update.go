// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wugelucky"
)

// WuGeLuckyUpdate is the builder for updating WuGeLucky entities.
type WuGeLuckyUpdate struct {
	config
	hooks    []Hook
	mutation *WuGeLuckyMutation
}

// Where appends a list predicates to the WuGeLuckyUpdate builder.
func (wglu *WuGeLuckyUpdate) Where(ps ...predicate.WuGeLucky) *WuGeLuckyUpdate {
	wglu.mutation.Where(ps...)
	return wglu
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wglu *WuGeLuckyUpdate) SetLastStroke1(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetLastStroke1()
	wglu.mutation.SetLastStroke1(i)
	return wglu
}

// AddLastStroke1 adds i to the "last_stroke_1" field.
func (wglu *WuGeLuckyUpdate) AddLastStroke1(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddLastStroke1(i)
	return wglu
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wglu *WuGeLuckyUpdate) SetLastStroke2(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetLastStroke2()
	wglu.mutation.SetLastStroke2(i)
	return wglu
}

// AddLastStroke2 adds i to the "last_stroke_2" field.
func (wglu *WuGeLuckyUpdate) AddLastStroke2(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddLastStroke2(i)
	return wglu
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wglu *WuGeLuckyUpdate) SetFirstStroke1(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetFirstStroke1()
	wglu.mutation.SetFirstStroke1(i)
	return wglu
}

// AddFirstStroke1 adds i to the "first_stroke_1" field.
func (wglu *WuGeLuckyUpdate) AddFirstStroke1(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddFirstStroke1(i)
	return wglu
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wglu *WuGeLuckyUpdate) SetFirstStroke2(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetFirstStroke2()
	wglu.mutation.SetFirstStroke2(i)
	return wglu
}

// AddFirstStroke2 adds i to the "first_stroke_2" field.
func (wglu *WuGeLuckyUpdate) AddFirstStroke2(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddFirstStroke2(i)
	return wglu
}

// SetTianGe sets the "tian_ge" field.
func (wglu *WuGeLuckyUpdate) SetTianGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetTianGe()
	wglu.mutation.SetTianGe(i)
	return wglu
}

// AddTianGe adds i to the "tian_ge" field.
func (wglu *WuGeLuckyUpdate) AddTianGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddTianGe(i)
	return wglu
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetTianDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetTianDaYan(s)
	return wglu
}

// SetRenGe sets the "ren_ge" field.
func (wglu *WuGeLuckyUpdate) SetRenGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetRenGe()
	wglu.mutation.SetRenGe(i)
	return wglu
}

// AddRenGe adds i to the "ren_ge" field.
func (wglu *WuGeLuckyUpdate) AddRenGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddRenGe(i)
	return wglu
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetRenDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetRenDaYan(s)
	return wglu
}

// SetDiGe sets the "di_ge" field.
func (wglu *WuGeLuckyUpdate) SetDiGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetDiGe()
	wglu.mutation.SetDiGe(i)
	return wglu
}

// AddDiGe adds i to the "di_ge" field.
func (wglu *WuGeLuckyUpdate) AddDiGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddDiGe(i)
	return wglu
}

// SetDiDaYan sets the "di_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetDiDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetDiDaYan(s)
	return wglu
}

// SetWaiGe sets the "wai_ge" field.
func (wglu *WuGeLuckyUpdate) SetWaiGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetWaiGe()
	wglu.mutation.SetWaiGe(i)
	return wglu
}

// AddWaiGe adds i to the "wai_ge" field.
func (wglu *WuGeLuckyUpdate) AddWaiGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddWaiGe(i)
	return wglu
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetWaiDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetWaiDaYan(s)
	return wglu
}

// SetZongGe sets the "zong_ge" field.
func (wglu *WuGeLuckyUpdate) SetZongGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.ResetZongGe()
	wglu.mutation.SetZongGe(i)
	return wglu
}

// AddZongGe adds i to the "zong_ge" field.
func (wglu *WuGeLuckyUpdate) AddZongGe(i int) *WuGeLuckyUpdate {
	wglu.mutation.AddZongGe(i)
	return wglu
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wglu *WuGeLuckyUpdate) SetZongDaYan(s string) *WuGeLuckyUpdate {
	wglu.mutation.SetZongDaYan(s)
	return wglu
}

// SetZongLucky sets the "zong_lucky" field.
func (wglu *WuGeLuckyUpdate) SetZongLucky(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongLucky(b)
	return wglu
}

// SetZongSex sets the "zong_sex" field.
func (wglu *WuGeLuckyUpdate) SetZongSex(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongSex(b)
	return wglu
}

// SetZongMax sets the "zong_max" field.
func (wglu *WuGeLuckyUpdate) SetZongMax(b bool) *WuGeLuckyUpdate {
	wglu.mutation.SetZongMax(b)
	return wglu
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wglu *WuGeLuckyUpdate) Mutation() *WuGeLuckyMutation {
	return wglu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wglu *WuGeLuckyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WuGeLuckyMutation](ctx, wglu.sqlSave, wglu.mutation, wglu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wglu *WuGeLuckyUpdate) SaveX(ctx context.Context) int {
	affected, err := wglu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wglu *WuGeLuckyUpdate) Exec(ctx context.Context) error {
	_, err := wglu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglu *WuGeLuckyUpdate) ExecX(ctx context.Context) {
	if err := wglu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wglu *WuGeLuckyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wugelucky.Table, wugelucky.Columns, sqlgraph.NewFieldSpec(wugelucky.FieldID, field.TypeUUID))
	if ps := wglu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wglu.mutation.LastStroke1(); ok {
		_spec.SetField(wugelucky.FieldLastStroke1, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedLastStroke1(); ok {
		_spec.AddField(wugelucky.FieldLastStroke1, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.LastStroke2(); ok {
		_spec.SetField(wugelucky.FieldLastStroke2, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedLastStroke2(); ok {
		_spec.AddField(wugelucky.FieldLastStroke2, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.FirstStroke1(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke1, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedFirstStroke1(); ok {
		_spec.AddField(wugelucky.FieldFirstStroke1, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.FirstStroke2(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke2, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedFirstStroke2(); ok {
		_spec.AddField(wugelucky.FieldFirstStroke2, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.TianGe(); ok {
		_spec.SetField(wugelucky.FieldTianGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedTianGe(); ok {
		_spec.AddField(wugelucky.FieldTianGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.TianDaYan(); ok {
		_spec.SetField(wugelucky.FieldTianDaYan, field.TypeString, value)
	}
	if value, ok := wglu.mutation.RenGe(); ok {
		_spec.SetField(wugelucky.FieldRenGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedRenGe(); ok {
		_spec.AddField(wugelucky.FieldRenGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.RenDaYan(); ok {
		_spec.SetField(wugelucky.FieldRenDaYan, field.TypeString, value)
	}
	if value, ok := wglu.mutation.DiGe(); ok {
		_spec.SetField(wugelucky.FieldDiGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedDiGe(); ok {
		_spec.AddField(wugelucky.FieldDiGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.DiDaYan(); ok {
		_spec.SetField(wugelucky.FieldDiDaYan, field.TypeString, value)
	}
	if value, ok := wglu.mutation.WaiGe(); ok {
		_spec.SetField(wugelucky.FieldWaiGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedWaiGe(); ok {
		_spec.AddField(wugelucky.FieldWaiGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.WaiDaYan(); ok {
		_spec.SetField(wugelucky.FieldWaiDaYan, field.TypeString, value)
	}
	if value, ok := wglu.mutation.ZongGe(); ok {
		_spec.SetField(wugelucky.FieldZongGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.AddedZongGe(); ok {
		_spec.AddField(wugelucky.FieldZongGe, field.TypeInt, value)
	}
	if value, ok := wglu.mutation.ZongDaYan(); ok {
		_spec.SetField(wugelucky.FieldZongDaYan, field.TypeString, value)
	}
	if value, ok := wglu.mutation.ZongLucky(); ok {
		_spec.SetField(wugelucky.FieldZongLucky, field.TypeBool, value)
	}
	if value, ok := wglu.mutation.ZongSex(); ok {
		_spec.SetField(wugelucky.FieldZongSex, field.TypeBool, value)
	}
	if value, ok := wglu.mutation.ZongMax(); ok {
		_spec.SetField(wugelucky.FieldZongMax, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wglu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wugelucky.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wglu.mutation.done = true
	return n, nil
}

// WuGeLuckyUpdateOne is the builder for updating a single WuGeLucky entity.
type WuGeLuckyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WuGeLuckyMutation
}

// SetLastStroke1 sets the "last_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) SetLastStroke1(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetLastStroke1()
	wgluo.mutation.SetLastStroke1(i)
	return wgluo
}

// AddLastStroke1 adds i to the "last_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) AddLastStroke1(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddLastStroke1(i)
	return wgluo
}

// SetLastStroke2 sets the "last_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) SetLastStroke2(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetLastStroke2()
	wgluo.mutation.SetLastStroke2(i)
	return wgluo
}

// AddLastStroke2 adds i to the "last_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) AddLastStroke2(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddLastStroke2(i)
	return wgluo
}

// SetFirstStroke1 sets the "first_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) SetFirstStroke1(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetFirstStroke1()
	wgluo.mutation.SetFirstStroke1(i)
	return wgluo
}

// AddFirstStroke1 adds i to the "first_stroke_1" field.
func (wgluo *WuGeLuckyUpdateOne) AddFirstStroke1(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddFirstStroke1(i)
	return wgluo
}

// SetFirstStroke2 sets the "first_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) SetFirstStroke2(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetFirstStroke2()
	wgluo.mutation.SetFirstStroke2(i)
	return wgluo
}

// AddFirstStroke2 adds i to the "first_stroke_2" field.
func (wgluo *WuGeLuckyUpdateOne) AddFirstStroke2(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddFirstStroke2(i)
	return wgluo
}

// SetTianGe sets the "tian_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetTianGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetTianGe()
	wgluo.mutation.SetTianGe(i)
	return wgluo
}

// AddTianGe adds i to the "tian_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddTianGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddTianGe(i)
	return wgluo
}

// SetTianDaYan sets the "tian_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetTianDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetTianDaYan(s)
	return wgluo
}

// SetRenGe sets the "ren_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetRenGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetRenGe()
	wgluo.mutation.SetRenGe(i)
	return wgluo
}

// AddRenGe adds i to the "ren_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddRenGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddRenGe(i)
	return wgluo
}

// SetRenDaYan sets the "ren_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetRenDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetRenDaYan(s)
	return wgluo
}

// SetDiGe sets the "di_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetDiGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetDiGe()
	wgluo.mutation.SetDiGe(i)
	return wgluo
}

// AddDiGe adds i to the "di_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddDiGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddDiGe(i)
	return wgluo
}

// SetDiDaYan sets the "di_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetDiDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetDiDaYan(s)
	return wgluo
}

// SetWaiGe sets the "wai_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetWaiGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetWaiGe()
	wgluo.mutation.SetWaiGe(i)
	return wgluo
}

// AddWaiGe adds i to the "wai_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddWaiGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddWaiGe(i)
	return wgluo
}

// SetWaiDaYan sets the "wai_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetWaiDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetWaiDaYan(s)
	return wgluo
}

// SetZongGe sets the "zong_ge" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.ResetZongGe()
	wgluo.mutation.SetZongGe(i)
	return wgluo
}

// AddZongGe adds i to the "zong_ge" field.
func (wgluo *WuGeLuckyUpdateOne) AddZongGe(i int) *WuGeLuckyUpdateOne {
	wgluo.mutation.AddZongGe(i)
	return wgluo
}

// SetZongDaYan sets the "zong_da_yan" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongDaYan(s string) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongDaYan(s)
	return wgluo
}

// SetZongLucky sets the "zong_lucky" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongLucky(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongLucky(b)
	return wgluo
}

// SetZongSex sets the "zong_sex" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongSex(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongSex(b)
	return wgluo
}

// SetZongMax sets the "zong_max" field.
func (wgluo *WuGeLuckyUpdateOne) SetZongMax(b bool) *WuGeLuckyUpdateOne {
	wgluo.mutation.SetZongMax(b)
	return wgluo
}

// Mutation returns the WuGeLuckyMutation object of the builder.
func (wgluo *WuGeLuckyUpdateOne) Mutation() *WuGeLuckyMutation {
	return wgluo.mutation
}

// Where appends a list predicates to the WuGeLuckyUpdate builder.
func (wgluo *WuGeLuckyUpdateOne) Where(ps ...predicate.WuGeLucky) *WuGeLuckyUpdateOne {
	wgluo.mutation.Where(ps...)
	return wgluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wgluo *WuGeLuckyUpdateOne) Select(field string, fields ...string) *WuGeLuckyUpdateOne {
	wgluo.fields = append([]string{field}, fields...)
	return wgluo
}

// Save executes the query and returns the updated WuGeLucky entity.
func (wgluo *WuGeLuckyUpdateOne) Save(ctx context.Context) (*WuGeLucky, error) {
	return withHooks[*WuGeLucky, WuGeLuckyMutation](ctx, wgluo.sqlSave, wgluo.mutation, wgluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wgluo *WuGeLuckyUpdateOne) SaveX(ctx context.Context) *WuGeLucky {
	node, err := wgluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wgluo *WuGeLuckyUpdateOne) Exec(ctx context.Context) error {
	_, err := wgluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgluo *WuGeLuckyUpdateOne) ExecX(ctx context.Context) {
	if err := wgluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgluo *WuGeLuckyUpdateOne) sqlSave(ctx context.Context) (_node *WuGeLucky, err error) {
	_spec := sqlgraph.NewUpdateSpec(wugelucky.Table, wugelucky.Columns, sqlgraph.NewFieldSpec(wugelucky.FieldID, field.TypeUUID))
	id, ok := wgluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WuGeLucky.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wgluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wugelucky.FieldID)
		for _, f := range fields {
			if !wugelucky.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wugelucky.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wgluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wgluo.mutation.LastStroke1(); ok {
		_spec.SetField(wugelucky.FieldLastStroke1, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedLastStroke1(); ok {
		_spec.AddField(wugelucky.FieldLastStroke1, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.LastStroke2(); ok {
		_spec.SetField(wugelucky.FieldLastStroke2, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedLastStroke2(); ok {
		_spec.AddField(wugelucky.FieldLastStroke2, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.FirstStroke1(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke1, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedFirstStroke1(); ok {
		_spec.AddField(wugelucky.FieldFirstStroke1, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.FirstStroke2(); ok {
		_spec.SetField(wugelucky.FieldFirstStroke2, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedFirstStroke2(); ok {
		_spec.AddField(wugelucky.FieldFirstStroke2, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.TianGe(); ok {
		_spec.SetField(wugelucky.FieldTianGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedTianGe(); ok {
		_spec.AddField(wugelucky.FieldTianGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.TianDaYan(); ok {
		_spec.SetField(wugelucky.FieldTianDaYan, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.RenGe(); ok {
		_spec.SetField(wugelucky.FieldRenGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedRenGe(); ok {
		_spec.AddField(wugelucky.FieldRenGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.RenDaYan(); ok {
		_spec.SetField(wugelucky.FieldRenDaYan, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.DiGe(); ok {
		_spec.SetField(wugelucky.FieldDiGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedDiGe(); ok {
		_spec.AddField(wugelucky.FieldDiGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.DiDaYan(); ok {
		_spec.SetField(wugelucky.FieldDiDaYan, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.WaiGe(); ok {
		_spec.SetField(wugelucky.FieldWaiGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedWaiGe(); ok {
		_spec.AddField(wugelucky.FieldWaiGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.WaiDaYan(); ok {
		_spec.SetField(wugelucky.FieldWaiDaYan, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.ZongGe(); ok {
		_spec.SetField(wugelucky.FieldZongGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.AddedZongGe(); ok {
		_spec.AddField(wugelucky.FieldZongGe, field.TypeInt, value)
	}
	if value, ok := wgluo.mutation.ZongDaYan(); ok {
		_spec.SetField(wugelucky.FieldZongDaYan, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.ZongLucky(); ok {
		_spec.SetField(wugelucky.FieldZongLucky, field.TypeBool, value)
	}
	if value, ok := wgluo.mutation.ZongSex(); ok {
		_spec.SetField(wugelucky.FieldZongSex, field.TypeBool, value)
	}
	if value, ok := wgluo.mutation.ZongMax(); ok {
		_spec.SetField(wugelucky.FieldZongMax, field.TypeBool, value)
	}
	_node = &WuGeLucky{config: wgluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wgluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wugelucky.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wgluo.mutation.done = true
	return _node, nil
}
