// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/character"
)

// CharacterCreate is the builder for creating a Character entity.
type CharacterCreate struct {
	config
	mutation *CharacterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPinYin sets the "pin_yin" field.
func (cc *CharacterCreate) SetPinYin(s []string) *CharacterCreate {
	cc.mutation.SetPinYin(s)
	return cc
}

// SetCh sets the "ch" field.
func (cc *CharacterCreate) SetCh(s string) *CharacterCreate {
	cc.mutation.SetCh(s)
	return cc
}

// SetRadical sets the "radical" field.
func (cc *CharacterCreate) SetRadical(s string) *CharacterCreate {
	cc.mutation.SetRadical(s)
	return cc
}

// SetRadicalStroke sets the "radical_stroke" field.
func (cc *CharacterCreate) SetRadicalStroke(i int) *CharacterCreate {
	cc.mutation.SetRadicalStroke(i)
	return cc
}

// SetStroke sets the "stroke" field.
func (cc *CharacterCreate) SetStroke(i int) *CharacterCreate {
	cc.mutation.SetStroke(i)
	return cc
}

// SetIsKangXi sets the "is_kang_xi" field.
func (cc *CharacterCreate) SetIsKangXi(b bool) *CharacterCreate {
	cc.mutation.SetIsKangXi(b)
	return cc
}

// SetKangXi sets the "kang_xi" field.
func (cc *CharacterCreate) SetKangXi(s string) *CharacterCreate {
	cc.mutation.SetKangXi(s)
	return cc
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (cc *CharacterCreate) SetKangXiStroke(i int) *CharacterCreate {
	cc.mutation.SetKangXiStroke(i)
	return cc
}

// SetSimpleRadical sets the "simple_radical" field.
func (cc *CharacterCreate) SetSimpleRadical(s string) *CharacterCreate {
	cc.mutation.SetSimpleRadical(s)
	return cc
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (cc *CharacterCreate) SetSimpleRadicalStroke(i int) *CharacterCreate {
	cc.mutation.SetSimpleRadicalStroke(i)
	return cc
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (cc *CharacterCreate) SetSimpleTotalStroke(i int) *CharacterCreate {
	cc.mutation.SetSimpleTotalStroke(i)
	return cc
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (cc *CharacterCreate) SetTraditionalRadical(s string) *CharacterCreate {
	cc.mutation.SetTraditionalRadical(s)
	return cc
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (cc *CharacterCreate) SetTraditionalRadicalStroke(i int) *CharacterCreate {
	cc.mutation.SetTraditionalRadicalStroke(i)
	return cc
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (cc *CharacterCreate) SetTraditionalTotalStroke(i int) *CharacterCreate {
	cc.mutation.SetTraditionalTotalStroke(i)
	return cc
}

// SetNameScience sets the "name_science" field.
func (cc *CharacterCreate) SetNameScience(b bool) *CharacterCreate {
	cc.mutation.SetNameScience(b)
	return cc
}

// SetWuXing sets the "wu_xing" field.
func (cc *CharacterCreate) SetWuXing(s string) *CharacterCreate {
	cc.mutation.SetWuXing(s)
	return cc
}

// SetLucky sets the "lucky" field.
func (cc *CharacterCreate) SetLucky(s string) *CharacterCreate {
	cc.mutation.SetLucky(s)
	return cc
}

// SetRegular sets the "regular" field.
func (cc *CharacterCreate) SetRegular(b bool) *CharacterCreate {
	cc.mutation.SetRegular(b)
	return cc
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (cc *CharacterCreate) SetTraditionalCharacter(s []string) *CharacterCreate {
	cc.mutation.SetTraditionalCharacter(s)
	return cc
}

// SetVariantCharacter sets the "variant_character" field.
func (cc *CharacterCreate) SetVariantCharacter(s []string) *CharacterCreate {
	cc.mutation.SetVariantCharacter(s)
	return cc
}

// SetComment sets the "comment" field.
func (cc *CharacterCreate) SetComment(s string) *CharacterCreate {
	cc.mutation.SetComment(s)
	return cc
}

// SetScienceStroke sets the "science_stroke" field.
func (cc *CharacterCreate) SetScienceStroke(i int) *CharacterCreate {
	cc.mutation.SetScienceStroke(i)
	return cc
}

// SetID sets the "id" field.
func (cc *CharacterCreate) SetID(s string) *CharacterCreate {
	cc.mutation.SetID(s)
	return cc
}

// Mutation returns the CharacterMutation object of the builder.
func (cc *CharacterCreate) Mutation() *CharacterMutation {
	return cc.mutation
}

// Save creates the Character in the database.
func (cc *CharacterCreate) Save(ctx context.Context) (*Character, error) {
	return withHooks[*Character, CharacterMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CharacterCreate) SaveX(ctx context.Context) *Character {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CharacterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CharacterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CharacterCreate) check() error {
	if _, ok := cc.mutation.PinYin(); !ok {
		return &ValidationError{Name: "pin_yin", err: errors.New(`ent: missing required field "Character.pin_yin"`)}
	}
	if _, ok := cc.mutation.Ch(); !ok {
		return &ValidationError{Name: "ch", err: errors.New(`ent: missing required field "Character.ch"`)}
	}
	if _, ok := cc.mutation.Radical(); !ok {
		return &ValidationError{Name: "radical", err: errors.New(`ent: missing required field "Character.radical"`)}
	}
	if _, ok := cc.mutation.RadicalStroke(); !ok {
		return &ValidationError{Name: "radical_stroke", err: errors.New(`ent: missing required field "Character.radical_stroke"`)}
	}
	if _, ok := cc.mutation.Stroke(); !ok {
		return &ValidationError{Name: "stroke", err: errors.New(`ent: missing required field "Character.stroke"`)}
	}
	if _, ok := cc.mutation.IsKangXi(); !ok {
		return &ValidationError{Name: "is_kang_xi", err: errors.New(`ent: missing required field "Character.is_kang_xi"`)}
	}
	if _, ok := cc.mutation.KangXi(); !ok {
		return &ValidationError{Name: "kang_xi", err: errors.New(`ent: missing required field "Character.kang_xi"`)}
	}
	if _, ok := cc.mutation.KangXiStroke(); !ok {
		return &ValidationError{Name: "kang_xi_stroke", err: errors.New(`ent: missing required field "Character.kang_xi_stroke"`)}
	}
	if _, ok := cc.mutation.SimpleRadical(); !ok {
		return &ValidationError{Name: "simple_radical", err: errors.New(`ent: missing required field "Character.simple_radical"`)}
	}
	if _, ok := cc.mutation.SimpleRadicalStroke(); !ok {
		return &ValidationError{Name: "simple_radical_stroke", err: errors.New(`ent: missing required field "Character.simple_radical_stroke"`)}
	}
	if _, ok := cc.mutation.SimpleTotalStroke(); !ok {
		return &ValidationError{Name: "simple_total_stroke", err: errors.New(`ent: missing required field "Character.simple_total_stroke"`)}
	}
	if _, ok := cc.mutation.TraditionalRadical(); !ok {
		return &ValidationError{Name: "traditional_radical", err: errors.New(`ent: missing required field "Character.traditional_radical"`)}
	}
	if _, ok := cc.mutation.TraditionalRadicalStroke(); !ok {
		return &ValidationError{Name: "traditional_radical_stroke", err: errors.New(`ent: missing required field "Character.traditional_radical_stroke"`)}
	}
	if _, ok := cc.mutation.TraditionalTotalStroke(); !ok {
		return &ValidationError{Name: "traditional_total_stroke", err: errors.New(`ent: missing required field "Character.traditional_total_stroke"`)}
	}
	if _, ok := cc.mutation.NameScience(); !ok {
		return &ValidationError{Name: "name_science", err: errors.New(`ent: missing required field "Character.name_science"`)}
	}
	if _, ok := cc.mutation.WuXing(); !ok {
		return &ValidationError{Name: "wu_xing", err: errors.New(`ent: missing required field "Character.wu_xing"`)}
	}
	if _, ok := cc.mutation.Lucky(); !ok {
		return &ValidationError{Name: "lucky", err: errors.New(`ent: missing required field "Character.lucky"`)}
	}
	if _, ok := cc.mutation.Regular(); !ok {
		return &ValidationError{Name: "regular", err: errors.New(`ent: missing required field "Character.regular"`)}
	}
	if _, ok := cc.mutation.TraditionalCharacter(); !ok {
		return &ValidationError{Name: "traditional_character", err: errors.New(`ent: missing required field "Character.traditional_character"`)}
	}
	if _, ok := cc.mutation.VariantCharacter(); !ok {
		return &ValidationError{Name: "variant_character", err: errors.New(`ent: missing required field "Character.variant_character"`)}
	}
	if _, ok := cc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Character.comment"`)}
	}
	if _, ok := cc.mutation.ScienceStroke(); !ok {
		return &ValidationError{Name: "science_stroke", err: errors.New(`ent: missing required field "Character.science_stroke"`)}
	}
	return nil
}

func (cc *CharacterCreate) sqlSave(ctx context.Context) (*Character, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Character.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CharacterCreate) createSpec() (*Character, *sqlgraph.CreateSpec) {
	var (
		_node = &Character{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(character.Table, sqlgraph.NewFieldSpec(character.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.PinYin(); ok {
		_spec.SetField(character.FieldPinYin, field.TypeJSON, value)
		_node.PinYin = value
	}
	if value, ok := cc.mutation.Ch(); ok {
		_spec.SetField(character.FieldCh, field.TypeString, value)
		_node.Ch = value
	}
	if value, ok := cc.mutation.Radical(); ok {
		_spec.SetField(character.FieldRadical, field.TypeString, value)
		_node.Radical = value
	}
	if value, ok := cc.mutation.RadicalStroke(); ok {
		_spec.SetField(character.FieldRadicalStroke, field.TypeInt, value)
		_node.RadicalStroke = value
	}
	if value, ok := cc.mutation.Stroke(); ok {
		_spec.SetField(character.FieldStroke, field.TypeInt, value)
		_node.Stroke = value
	}
	if value, ok := cc.mutation.IsKangXi(); ok {
		_spec.SetField(character.FieldIsKangXi, field.TypeBool, value)
		_node.IsKangXi = value
	}
	if value, ok := cc.mutation.KangXi(); ok {
		_spec.SetField(character.FieldKangXi, field.TypeString, value)
		_node.KangXi = value
	}
	if value, ok := cc.mutation.KangXiStroke(); ok {
		_spec.SetField(character.FieldKangXiStroke, field.TypeInt, value)
		_node.KangXiStroke = value
	}
	if value, ok := cc.mutation.SimpleRadical(); ok {
		_spec.SetField(character.FieldSimpleRadical, field.TypeString, value)
		_node.SimpleRadical = value
	}
	if value, ok := cc.mutation.SimpleRadicalStroke(); ok {
		_spec.SetField(character.FieldSimpleRadicalStroke, field.TypeInt, value)
		_node.SimpleRadicalStroke = value
	}
	if value, ok := cc.mutation.SimpleTotalStroke(); ok {
		_spec.SetField(character.FieldSimpleTotalStroke, field.TypeInt, value)
		_node.SimpleTotalStroke = value
	}
	if value, ok := cc.mutation.TraditionalRadical(); ok {
		_spec.SetField(character.FieldTraditionalRadical, field.TypeString, value)
		_node.TraditionalRadical = value
	}
	if value, ok := cc.mutation.TraditionalRadicalStroke(); ok {
		_spec.SetField(character.FieldTraditionalRadicalStroke, field.TypeInt, value)
		_node.TraditionalRadicalStroke = value
	}
	if value, ok := cc.mutation.TraditionalTotalStroke(); ok {
		_spec.SetField(character.FieldTraditionalTotalStroke, field.TypeInt, value)
		_node.TraditionalTotalStroke = value
	}
	if value, ok := cc.mutation.NameScience(); ok {
		_spec.SetField(character.FieldNameScience, field.TypeBool, value)
		_node.NameScience = value
	}
	if value, ok := cc.mutation.WuXing(); ok {
		_spec.SetField(character.FieldWuXing, field.TypeString, value)
		_node.WuXing = value
	}
	if value, ok := cc.mutation.Lucky(); ok {
		_spec.SetField(character.FieldLucky, field.TypeString, value)
		_node.Lucky = value
	}
	if value, ok := cc.mutation.Regular(); ok {
		_spec.SetField(character.FieldRegular, field.TypeBool, value)
		_node.Regular = value
	}
	if value, ok := cc.mutation.TraditionalCharacter(); ok {
		_spec.SetField(character.FieldTraditionalCharacter, field.TypeJSON, value)
		_node.TraditionalCharacter = value
	}
	if value, ok := cc.mutation.VariantCharacter(); ok {
		_spec.SetField(character.FieldVariantCharacter, field.TypeJSON, value)
		_node.VariantCharacter = value
	}
	if value, ok := cc.mutation.Comment(); ok {
		_spec.SetField(character.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := cc.mutation.ScienceStroke(); ok {
		_spec.SetField(character.FieldScienceStroke, field.TypeInt, value)
		_node.ScienceStroke = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Character.Create().
//		SetPinYin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (cc *CharacterCreate) OnConflict(opts ...sql.ConflictOption) *CharacterUpsertOne {
	cc.conflict = opts
	return &CharacterUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Character.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CharacterCreate) OnConflictColumns(columns ...string) *CharacterUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CharacterUpsertOne{
		create: cc,
	}
}

type (
	// CharacterUpsertOne is the builder for "upsert"-ing
	//  one Character node.
	CharacterUpsertOne struct {
		create *CharacterCreate
	}

	// CharacterUpsert is the "OnConflict" setter.
	CharacterUpsert struct {
		*sql.UpdateSet
	}
)

// SetPinYin sets the "pin_yin" field.
func (u *CharacterUpsert) SetPinYin(v []string) *CharacterUpsert {
	u.Set(character.FieldPinYin, v)
	return u
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *CharacterUpsert) UpdatePinYin() *CharacterUpsert {
	u.SetExcluded(character.FieldPinYin)
	return u
}

// SetCh sets the "ch" field.
func (u *CharacterUpsert) SetCh(v string) *CharacterUpsert {
	u.Set(character.FieldCh, v)
	return u
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateCh() *CharacterUpsert {
	u.SetExcluded(character.FieldCh)
	return u
}

// SetRadical sets the "radical" field.
func (u *CharacterUpsert) SetRadical(v string) *CharacterUpsert {
	u.Set(character.FieldRadical, v)
	return u
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateRadical() *CharacterUpsert {
	u.SetExcluded(character.FieldRadical)
	return u
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *CharacterUpsert) SetRadicalStroke(v int) *CharacterUpsert {
	u.Set(character.FieldRadicalStroke, v)
	return u
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateRadicalStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldRadicalStroke)
	return u
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *CharacterUpsert) AddRadicalStroke(v int) *CharacterUpsert {
	u.Add(character.FieldRadicalStroke, v)
	return u
}

// SetStroke sets the "stroke" field.
func (u *CharacterUpsert) SetStroke(v int) *CharacterUpsert {
	u.Set(character.FieldStroke, v)
	return u
}

// UpdateStroke sets the "stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldStroke)
	return u
}

// AddStroke adds v to the "stroke" field.
func (u *CharacterUpsert) AddStroke(v int) *CharacterUpsert {
	u.Add(character.FieldStroke, v)
	return u
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *CharacterUpsert) SetIsKangXi(v bool) *CharacterUpsert {
	u.Set(character.FieldIsKangXi, v)
	return u
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateIsKangXi() *CharacterUpsert {
	u.SetExcluded(character.FieldIsKangXi)
	return u
}

// SetKangXi sets the "kang_xi" field.
func (u *CharacterUpsert) SetKangXi(v string) *CharacterUpsert {
	u.Set(character.FieldKangXi, v)
	return u
}

// UpdateKangXi sets the "kang_xi" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateKangXi() *CharacterUpsert {
	u.SetExcluded(character.FieldKangXi)
	return u
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (u *CharacterUpsert) SetKangXiStroke(v int) *CharacterUpsert {
	u.Set(character.FieldKangXiStroke, v)
	return u
}

// UpdateKangXiStroke sets the "kang_xi_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateKangXiStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldKangXiStroke)
	return u
}

// AddKangXiStroke adds v to the "kang_xi_stroke" field.
func (u *CharacterUpsert) AddKangXiStroke(v int) *CharacterUpsert {
	u.Add(character.FieldKangXiStroke, v)
	return u
}

// SetSimpleRadical sets the "simple_radical" field.
func (u *CharacterUpsert) SetSimpleRadical(v string) *CharacterUpsert {
	u.Set(character.FieldSimpleRadical, v)
	return u
}

// UpdateSimpleRadical sets the "simple_radical" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateSimpleRadical() *CharacterUpsert {
	u.SetExcluded(character.FieldSimpleRadical)
	return u
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (u *CharacterUpsert) SetSimpleRadicalStroke(v int) *CharacterUpsert {
	u.Set(character.FieldSimpleRadicalStroke, v)
	return u
}

// UpdateSimpleRadicalStroke sets the "simple_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateSimpleRadicalStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldSimpleRadicalStroke)
	return u
}

// AddSimpleRadicalStroke adds v to the "simple_radical_stroke" field.
func (u *CharacterUpsert) AddSimpleRadicalStroke(v int) *CharacterUpsert {
	u.Add(character.FieldSimpleRadicalStroke, v)
	return u
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (u *CharacterUpsert) SetSimpleTotalStroke(v int) *CharacterUpsert {
	u.Set(character.FieldSimpleTotalStroke, v)
	return u
}

// UpdateSimpleTotalStroke sets the "simple_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateSimpleTotalStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldSimpleTotalStroke)
	return u
}

// AddSimpleTotalStroke adds v to the "simple_total_stroke" field.
func (u *CharacterUpsert) AddSimpleTotalStroke(v int) *CharacterUpsert {
	u.Add(character.FieldSimpleTotalStroke, v)
	return u
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (u *CharacterUpsert) SetTraditionalRadical(v string) *CharacterUpsert {
	u.Set(character.FieldTraditionalRadical, v)
	return u
}

// UpdateTraditionalRadical sets the "traditional_radical" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateTraditionalRadical() *CharacterUpsert {
	u.SetExcluded(character.FieldTraditionalRadical)
	return u
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (u *CharacterUpsert) SetTraditionalRadicalStroke(v int) *CharacterUpsert {
	u.Set(character.FieldTraditionalRadicalStroke, v)
	return u
}

// UpdateTraditionalRadicalStroke sets the "traditional_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateTraditionalRadicalStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldTraditionalRadicalStroke)
	return u
}

// AddTraditionalRadicalStroke adds v to the "traditional_radical_stroke" field.
func (u *CharacterUpsert) AddTraditionalRadicalStroke(v int) *CharacterUpsert {
	u.Add(character.FieldTraditionalRadicalStroke, v)
	return u
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (u *CharacterUpsert) SetTraditionalTotalStroke(v int) *CharacterUpsert {
	u.Set(character.FieldTraditionalTotalStroke, v)
	return u
}

// UpdateTraditionalTotalStroke sets the "traditional_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateTraditionalTotalStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldTraditionalTotalStroke)
	return u
}

// AddTraditionalTotalStroke adds v to the "traditional_total_stroke" field.
func (u *CharacterUpsert) AddTraditionalTotalStroke(v int) *CharacterUpsert {
	u.Add(character.FieldTraditionalTotalStroke, v)
	return u
}

// SetNameScience sets the "name_science" field.
func (u *CharacterUpsert) SetNameScience(v bool) *CharacterUpsert {
	u.Set(character.FieldNameScience, v)
	return u
}

// UpdateNameScience sets the "name_science" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateNameScience() *CharacterUpsert {
	u.SetExcluded(character.FieldNameScience)
	return u
}

// SetWuXing sets the "wu_xing" field.
func (u *CharacterUpsert) SetWuXing(v string) *CharacterUpsert {
	u.Set(character.FieldWuXing, v)
	return u
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateWuXing() *CharacterUpsert {
	u.SetExcluded(character.FieldWuXing)
	return u
}

// SetLucky sets the "lucky" field.
func (u *CharacterUpsert) SetLucky(v string) *CharacterUpsert {
	u.Set(character.FieldLucky, v)
	return u
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateLucky() *CharacterUpsert {
	u.SetExcluded(character.FieldLucky)
	return u
}

// SetRegular sets the "regular" field.
func (u *CharacterUpsert) SetRegular(v bool) *CharacterUpsert {
	u.Set(character.FieldRegular, v)
	return u
}

// UpdateRegular sets the "regular" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateRegular() *CharacterUpsert {
	u.SetExcluded(character.FieldRegular)
	return u
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (u *CharacterUpsert) SetTraditionalCharacter(v []string) *CharacterUpsert {
	u.Set(character.FieldTraditionalCharacter, v)
	return u
}

// UpdateTraditionalCharacter sets the "traditional_character" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateTraditionalCharacter() *CharacterUpsert {
	u.SetExcluded(character.FieldTraditionalCharacter)
	return u
}

// SetVariantCharacter sets the "variant_character" field.
func (u *CharacterUpsert) SetVariantCharacter(v []string) *CharacterUpsert {
	u.Set(character.FieldVariantCharacter, v)
	return u
}

// UpdateVariantCharacter sets the "variant_character" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateVariantCharacter() *CharacterUpsert {
	u.SetExcluded(character.FieldVariantCharacter)
	return u
}

// SetComment sets the "comment" field.
func (u *CharacterUpsert) SetComment(v string) *CharacterUpsert {
	u.Set(character.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateComment() *CharacterUpsert {
	u.SetExcluded(character.FieldComment)
	return u
}

// SetScienceStroke sets the "science_stroke" field.
func (u *CharacterUpsert) SetScienceStroke(v int) *CharacterUpsert {
	u.Set(character.FieldScienceStroke, v)
	return u
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *CharacterUpsert) UpdateScienceStroke() *CharacterUpsert {
	u.SetExcluded(character.FieldScienceStroke)
	return u
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *CharacterUpsert) AddScienceStroke(v int) *CharacterUpsert {
	u.Add(character.FieldScienceStroke, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Character.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(character.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CharacterUpsertOne) UpdateNewValues() *CharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(character.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Character.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CharacterUpsertOne) Ignore() *CharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CharacterUpsertOne) DoNothing() *CharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CharacterCreate.OnConflict
// documentation for more info.
func (u *CharacterUpsertOne) Update(set func(*CharacterUpsert)) *CharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *CharacterUpsertOne) SetPinYin(v []string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdatePinYin() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetCh sets the "ch" field.
func (u *CharacterUpsertOne) SetCh(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetCh(v)
	})
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateCh() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateCh()
	})
}

// SetRadical sets the "radical" field.
func (u *CharacterUpsertOne) SetRadical(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateRadical() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *CharacterUpsertOne) SetRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *CharacterUpsertOne) AddRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateRadicalStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetStroke sets the "stroke" field.
func (u *CharacterUpsertOne) SetStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetStroke(v)
	})
}

// AddStroke adds v to the "stroke" field.
func (u *CharacterUpsertOne) AddStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddStroke(v)
	})
}

// UpdateStroke sets the "stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateStroke()
	})
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *CharacterUpsertOne) SetIsKangXi(v bool) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetIsKangXi(v)
	})
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateIsKangXi() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateIsKangXi()
	})
}

// SetKangXi sets the "kang_xi" field.
func (u *CharacterUpsertOne) SetKangXi(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetKangXi(v)
	})
}

// UpdateKangXi sets the "kang_xi" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateKangXi() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateKangXi()
	})
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (u *CharacterUpsertOne) SetKangXiStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetKangXiStroke(v)
	})
}

// AddKangXiStroke adds v to the "kang_xi_stroke" field.
func (u *CharacterUpsertOne) AddKangXiStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddKangXiStroke(v)
	})
}

// UpdateKangXiStroke sets the "kang_xi_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateKangXiStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateKangXiStroke()
	})
}

// SetSimpleRadical sets the "simple_radical" field.
func (u *CharacterUpsertOne) SetSimpleRadical(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleRadical(v)
	})
}

// UpdateSimpleRadical sets the "simple_radical" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateSimpleRadical() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleRadical()
	})
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (u *CharacterUpsertOne) SetSimpleRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleRadicalStroke(v)
	})
}

// AddSimpleRadicalStroke adds v to the "simple_radical_stroke" field.
func (u *CharacterUpsertOne) AddSimpleRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddSimpleRadicalStroke(v)
	})
}

// UpdateSimpleRadicalStroke sets the "simple_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateSimpleRadicalStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleRadicalStroke()
	})
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (u *CharacterUpsertOne) SetSimpleTotalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleTotalStroke(v)
	})
}

// AddSimpleTotalStroke adds v to the "simple_total_stroke" field.
func (u *CharacterUpsertOne) AddSimpleTotalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddSimpleTotalStroke(v)
	})
}

// UpdateSimpleTotalStroke sets the "simple_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateSimpleTotalStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleTotalStroke()
	})
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (u *CharacterUpsertOne) SetTraditionalRadical(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalRadical(v)
	})
}

// UpdateTraditionalRadical sets the "traditional_radical" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateTraditionalRadical() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalRadical()
	})
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (u *CharacterUpsertOne) SetTraditionalRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalRadicalStroke(v)
	})
}

// AddTraditionalRadicalStroke adds v to the "traditional_radical_stroke" field.
func (u *CharacterUpsertOne) AddTraditionalRadicalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddTraditionalRadicalStroke(v)
	})
}

// UpdateTraditionalRadicalStroke sets the "traditional_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateTraditionalRadicalStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalRadicalStroke()
	})
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (u *CharacterUpsertOne) SetTraditionalTotalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalTotalStroke(v)
	})
}

// AddTraditionalTotalStroke adds v to the "traditional_total_stroke" field.
func (u *CharacterUpsertOne) AddTraditionalTotalStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddTraditionalTotalStroke(v)
	})
}

// UpdateTraditionalTotalStroke sets the "traditional_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateTraditionalTotalStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalTotalStroke()
	})
}

// SetNameScience sets the "name_science" field.
func (u *CharacterUpsertOne) SetNameScience(v bool) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetNameScience(v)
	})
}

// UpdateNameScience sets the "name_science" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateNameScience() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateNameScience()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *CharacterUpsertOne) SetWuXing(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateWuXing() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *CharacterUpsertOne) SetLucky(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateLucky() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetRegular sets the "regular" field.
func (u *CharacterUpsertOne) SetRegular(v bool) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRegular(v)
	})
}

// UpdateRegular sets the "regular" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateRegular() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRegular()
	})
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (u *CharacterUpsertOne) SetTraditionalCharacter(v []string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalCharacter(v)
	})
}

// UpdateTraditionalCharacter sets the "traditional_character" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateTraditionalCharacter() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalCharacter()
	})
}

// SetVariantCharacter sets the "variant_character" field.
func (u *CharacterUpsertOne) SetVariantCharacter(v []string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetVariantCharacter(v)
	})
}

// UpdateVariantCharacter sets the "variant_character" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateVariantCharacter() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateVariantCharacter()
	})
}

// SetComment sets the "comment" field.
func (u *CharacterUpsertOne) SetComment(v string) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateComment() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateComment()
	})
}

// SetScienceStroke sets the "science_stroke" field.
func (u *CharacterUpsertOne) SetScienceStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.SetScienceStroke(v)
	})
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *CharacterUpsertOne) AddScienceStroke(v int) *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.AddScienceStroke(v)
	})
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *CharacterUpsertOne) UpdateScienceStroke() *CharacterUpsertOne {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateScienceStroke()
	})
}

// Exec executes the query.
func (u *CharacterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CharacterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CharacterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CharacterUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CharacterUpsertOne.ID is not supported by MySQL driver. Use CharacterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CharacterUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CharacterCreateBulk is the builder for creating many Character entities in bulk.
type CharacterCreateBulk struct {
	config
	builders []*CharacterCreate
	conflict []sql.ConflictOption
}

// Save creates the Character entities in the database.
func (ccb *CharacterCreateBulk) Save(ctx context.Context) ([]*Character, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Character, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharacterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CharacterCreateBulk) SaveX(ctx context.Context) []*Character {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CharacterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CharacterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Character.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (ccb *CharacterCreateBulk) OnConflict(opts ...sql.ConflictOption) *CharacterUpsertBulk {
	ccb.conflict = opts
	return &CharacterUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Character.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CharacterCreateBulk) OnConflictColumns(columns ...string) *CharacterUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CharacterUpsertBulk{
		create: ccb,
	}
}

// CharacterUpsertBulk is the builder for "upsert"-ing
// a bulk of Character nodes.
type CharacterUpsertBulk struct {
	create *CharacterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Character.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(character.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CharacterUpsertBulk) UpdateNewValues() *CharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(character.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Character.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CharacterUpsertBulk) Ignore() *CharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CharacterUpsertBulk) DoNothing() *CharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CharacterCreateBulk.OnConflict
// documentation for more info.
func (u *CharacterUpsertBulk) Update(set func(*CharacterUpsert)) *CharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *CharacterUpsertBulk) SetPinYin(v []string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdatePinYin() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetCh sets the "ch" field.
func (u *CharacterUpsertBulk) SetCh(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetCh(v)
	})
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateCh() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateCh()
	})
}

// SetRadical sets the "radical" field.
func (u *CharacterUpsertBulk) SetRadical(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateRadical() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *CharacterUpsertBulk) SetRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *CharacterUpsertBulk) AddRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateRadicalStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetStroke sets the "stroke" field.
func (u *CharacterUpsertBulk) SetStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetStroke(v)
	})
}

// AddStroke adds v to the "stroke" field.
func (u *CharacterUpsertBulk) AddStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddStroke(v)
	})
}

// UpdateStroke sets the "stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateStroke()
	})
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *CharacterUpsertBulk) SetIsKangXi(v bool) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetIsKangXi(v)
	})
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateIsKangXi() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateIsKangXi()
	})
}

// SetKangXi sets the "kang_xi" field.
func (u *CharacterUpsertBulk) SetKangXi(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetKangXi(v)
	})
}

// UpdateKangXi sets the "kang_xi" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateKangXi() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateKangXi()
	})
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (u *CharacterUpsertBulk) SetKangXiStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetKangXiStroke(v)
	})
}

// AddKangXiStroke adds v to the "kang_xi_stroke" field.
func (u *CharacterUpsertBulk) AddKangXiStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddKangXiStroke(v)
	})
}

// UpdateKangXiStroke sets the "kang_xi_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateKangXiStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateKangXiStroke()
	})
}

// SetSimpleRadical sets the "simple_radical" field.
func (u *CharacterUpsertBulk) SetSimpleRadical(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleRadical(v)
	})
}

// UpdateSimpleRadical sets the "simple_radical" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateSimpleRadical() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleRadical()
	})
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (u *CharacterUpsertBulk) SetSimpleRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleRadicalStroke(v)
	})
}

// AddSimpleRadicalStroke adds v to the "simple_radical_stroke" field.
func (u *CharacterUpsertBulk) AddSimpleRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddSimpleRadicalStroke(v)
	})
}

// UpdateSimpleRadicalStroke sets the "simple_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateSimpleRadicalStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleRadicalStroke()
	})
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (u *CharacterUpsertBulk) SetSimpleTotalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetSimpleTotalStroke(v)
	})
}

// AddSimpleTotalStroke adds v to the "simple_total_stroke" field.
func (u *CharacterUpsertBulk) AddSimpleTotalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddSimpleTotalStroke(v)
	})
}

// UpdateSimpleTotalStroke sets the "simple_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateSimpleTotalStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateSimpleTotalStroke()
	})
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (u *CharacterUpsertBulk) SetTraditionalRadical(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalRadical(v)
	})
}

// UpdateTraditionalRadical sets the "traditional_radical" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateTraditionalRadical() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalRadical()
	})
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (u *CharacterUpsertBulk) SetTraditionalRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalRadicalStroke(v)
	})
}

// AddTraditionalRadicalStroke adds v to the "traditional_radical_stroke" field.
func (u *CharacterUpsertBulk) AddTraditionalRadicalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddTraditionalRadicalStroke(v)
	})
}

// UpdateTraditionalRadicalStroke sets the "traditional_radical_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateTraditionalRadicalStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalRadicalStroke()
	})
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (u *CharacterUpsertBulk) SetTraditionalTotalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalTotalStroke(v)
	})
}

// AddTraditionalTotalStroke adds v to the "traditional_total_stroke" field.
func (u *CharacterUpsertBulk) AddTraditionalTotalStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddTraditionalTotalStroke(v)
	})
}

// UpdateTraditionalTotalStroke sets the "traditional_total_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateTraditionalTotalStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalTotalStroke()
	})
}

// SetNameScience sets the "name_science" field.
func (u *CharacterUpsertBulk) SetNameScience(v bool) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetNameScience(v)
	})
}

// UpdateNameScience sets the "name_science" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateNameScience() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateNameScience()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *CharacterUpsertBulk) SetWuXing(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateWuXing() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *CharacterUpsertBulk) SetLucky(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateLucky() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetRegular sets the "regular" field.
func (u *CharacterUpsertBulk) SetRegular(v bool) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetRegular(v)
	})
}

// UpdateRegular sets the "regular" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateRegular() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateRegular()
	})
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (u *CharacterUpsertBulk) SetTraditionalCharacter(v []string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetTraditionalCharacter(v)
	})
}

// UpdateTraditionalCharacter sets the "traditional_character" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateTraditionalCharacter() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateTraditionalCharacter()
	})
}

// SetVariantCharacter sets the "variant_character" field.
func (u *CharacterUpsertBulk) SetVariantCharacter(v []string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetVariantCharacter(v)
	})
}

// UpdateVariantCharacter sets the "variant_character" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateVariantCharacter() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateVariantCharacter()
	})
}

// SetComment sets the "comment" field.
func (u *CharacterUpsertBulk) SetComment(v string) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateComment() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateComment()
	})
}

// SetScienceStroke sets the "science_stroke" field.
func (u *CharacterUpsertBulk) SetScienceStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.SetScienceStroke(v)
	})
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *CharacterUpsertBulk) AddScienceStroke(v int) *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.AddScienceStroke(v)
	})
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *CharacterUpsertBulk) UpdateScienceStroke() *CharacterUpsertBulk {
	return u.Update(func(s *CharacterUpsert) {
		s.UpdateScienceStroke()
	})
}

// Exec executes the query.
func (u *CharacterUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CharacterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CharacterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CharacterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
