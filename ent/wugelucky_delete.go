// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wugelucky"
)

// WuGeLuckyDelete is the builder for deleting a WuGeLucky entity.
type WuGeLuckyDelete struct {
	config
	hooks    []Hook
	mutation *WuGeLuckyMutation
}

// Where appends a list predicates to the WuGeLuckyDelete builder.
func (wgld *WuGeLuckyDelete) Where(ps ...predicate.WuGeLucky) *WuGeLuckyDelete {
	wgld.mutation.Where(ps...)
	return wgld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wgld *WuGeLuckyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, WuGeLuckyMutation](ctx, wgld.sqlExec, wgld.mutation, wgld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wgld *WuGeLuckyDelete) ExecX(ctx context.Context) int {
	n, err := wgld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wgld *WuGeLuckyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wugelucky.Table, sqlgraph.NewFieldSpec(wugelucky.FieldID, field.TypeUUID))
	if ps := wgld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wgld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wgld.mutation.done = true
	return affected, err
}

// WuGeLuckyDeleteOne is the builder for deleting a single WuGeLucky entity.
type WuGeLuckyDeleteOne struct {
	wgld *WuGeLuckyDelete
}

// Where appends a list predicates to the WuGeLuckyDelete builder.
func (wgldo *WuGeLuckyDeleteOne) Where(ps ...predicate.WuGeLucky) *WuGeLuckyDeleteOne {
	wgldo.wgld.mutation.Where(ps...)
	return wgldo
}

// Exec executes the deletion query.
func (wgldo *WuGeLuckyDeleteOne) Exec(ctx context.Context) error {
	n, err := wgldo.wgld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wugelucky.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wgldo *WuGeLuckyDeleteOne) ExecX(ctx context.Context) {
	if err := wgldo.Exec(ctx); err != nil {
		panic(err)
	}
}
