// Code generated by ent, DO NOT EDIT.

package ncharacter

import (
	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldID, id))
}

// Char applies equality check predicate on the "char" field. It's identical to CharEQ.
func Char(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldChar, v))
}

// CharStroke applies equality check predicate on the "char_stroke" field. It's identical to CharStrokeEQ.
func CharStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldCharStroke, v))
}

// Radical applies equality check predicate on the "radical" field. It's identical to RadicalEQ.
func Radical(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadical, v))
}

// RadicalStroke applies equality check predicate on the "radical_stroke" field. It's identical to RadicalStrokeEQ.
func RadicalStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadicalStroke, v))
}

// IsRegular applies equality check predicate on the "is_regular" field. It's identical to IsRegularEQ.
func IsRegular(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsRegular, v))
}

// IsSimplified applies equality check predicate on the "is_simplified" field. It's identical to IsSimplifiedEQ.
func IsSimplified(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsSimplified, v))
}

// IsTraditional applies equality check predicate on the "is_traditional" field. It's identical to IsTraditionalEQ.
func IsTraditional(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsTraditional, v))
}

// IsKangXi applies equality check predicate on the "is_kang_xi" field. It's identical to IsKangXiEQ.
func IsKangXi(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsKangXi, v))
}

// IsVariant applies equality check predicate on the "is_variant" field. It's identical to IsVariantEQ.
func IsVariant(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsVariant, v))
}

// IsScience applies equality check predicate on the "is_science" field. It's identical to IsScienceEQ.
func IsScience(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsScience, v))
}

// ScienceStroke applies equality check predicate on the "science_stroke" field. It's identical to ScienceStrokeEQ.
func ScienceStroke(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldScienceStroke, v))
}

// WuXing applies equality check predicate on the "wu_xing" field. It's identical to WuXingEQ.
func WuXing(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldWuXing, v))
}

// Lucky applies equality check predicate on the "lucky" field. It's identical to LuckyEQ.
func Lucky(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldLucky, v))
}

// Explanation applies equality check predicate on the "explanation" field. It's identical to ExplanationEQ.
func Explanation(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldExplanation, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldComment, v))
}

// NeedFix applies equality check predicate on the "need_fix" field. It's identical to NeedFixEQ.
func NeedFix(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldNeedFix, v))
}

// CharEQ applies the EQ predicate on the "char" field.
func CharEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldChar, v))
}

// CharNEQ applies the NEQ predicate on the "char" field.
func CharNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldChar, v))
}

// CharIn applies the In predicate on the "char" field.
func CharIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldChar, vs...))
}

// CharNotIn applies the NotIn predicate on the "char" field.
func CharNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldChar, vs...))
}

// CharGT applies the GT predicate on the "char" field.
func CharGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldChar, v))
}

// CharGTE applies the GTE predicate on the "char" field.
func CharGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldChar, v))
}

// CharLT applies the LT predicate on the "char" field.
func CharLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldChar, v))
}

// CharLTE applies the LTE predicate on the "char" field.
func CharLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldChar, v))
}

// CharContains applies the Contains predicate on the "char" field.
func CharContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldChar, v))
}

// CharHasPrefix applies the HasPrefix predicate on the "char" field.
func CharHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldChar, v))
}

// CharHasSuffix applies the HasSuffix predicate on the "char" field.
func CharHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldChar, v))
}

// CharEqualFold applies the EqualFold predicate on the "char" field.
func CharEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldChar, v))
}

// CharContainsFold applies the ContainsFold predicate on the "char" field.
func CharContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldChar, v))
}

// CharStrokeEQ applies the EQ predicate on the "char_stroke" field.
func CharStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldCharStroke, v))
}

// CharStrokeNEQ applies the NEQ predicate on the "char_stroke" field.
func CharStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldCharStroke, v))
}

// CharStrokeIn applies the In predicate on the "char_stroke" field.
func CharStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldCharStroke, vs...))
}

// CharStrokeNotIn applies the NotIn predicate on the "char_stroke" field.
func CharStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldCharStroke, vs...))
}

// CharStrokeGT applies the GT predicate on the "char_stroke" field.
func CharStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldCharStroke, v))
}

// CharStrokeGTE applies the GTE predicate on the "char_stroke" field.
func CharStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldCharStroke, v))
}

// CharStrokeLT applies the LT predicate on the "char_stroke" field.
func CharStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldCharStroke, v))
}

// CharStrokeLTE applies the LTE predicate on the "char_stroke" field.
func CharStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldCharStroke, v))
}

// RadicalEQ applies the EQ predicate on the "radical" field.
func RadicalEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadical, v))
}

// RadicalNEQ applies the NEQ predicate on the "radical" field.
func RadicalNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRadical, v))
}

// RadicalIn applies the In predicate on the "radical" field.
func RadicalIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRadical, vs...))
}

// RadicalNotIn applies the NotIn predicate on the "radical" field.
func RadicalNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRadical, vs...))
}

// RadicalGT applies the GT predicate on the "radical" field.
func RadicalGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRadical, v))
}

// RadicalGTE applies the GTE predicate on the "radical" field.
func RadicalGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRadical, v))
}

// RadicalLT applies the LT predicate on the "radical" field.
func RadicalLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRadical, v))
}

// RadicalLTE applies the LTE predicate on the "radical" field.
func RadicalLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRadical, v))
}

// RadicalContains applies the Contains predicate on the "radical" field.
func RadicalContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldRadical, v))
}

// RadicalHasPrefix applies the HasPrefix predicate on the "radical" field.
func RadicalHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldRadical, v))
}

// RadicalHasSuffix applies the HasSuffix predicate on the "radical" field.
func RadicalHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldRadical, v))
}

// RadicalEqualFold applies the EqualFold predicate on the "radical" field.
func RadicalEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldRadical, v))
}

// RadicalContainsFold applies the ContainsFold predicate on the "radical" field.
func RadicalContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldRadical, v))
}

// RadicalStrokeEQ applies the EQ predicate on the "radical_stroke" field.
func RadicalStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldRadicalStroke, v))
}

// RadicalStrokeNEQ applies the NEQ predicate on the "radical_stroke" field.
func RadicalStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldRadicalStroke, v))
}

// RadicalStrokeIn applies the In predicate on the "radical_stroke" field.
func RadicalStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldRadicalStroke, vs...))
}

// RadicalStrokeNotIn applies the NotIn predicate on the "radical_stroke" field.
func RadicalStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldRadicalStroke, vs...))
}

// RadicalStrokeGT applies the GT predicate on the "radical_stroke" field.
func RadicalStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldRadicalStroke, v))
}

// RadicalStrokeGTE applies the GTE predicate on the "radical_stroke" field.
func RadicalStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldRadicalStroke, v))
}

// RadicalStrokeLT applies the LT predicate on the "radical_stroke" field.
func RadicalStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldRadicalStroke, v))
}

// RadicalStrokeLTE applies the LTE predicate on the "radical_stroke" field.
func RadicalStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldRadicalStroke, v))
}

// IsRegularEQ applies the EQ predicate on the "is_regular" field.
func IsRegularEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsRegular, v))
}

// IsRegularNEQ applies the NEQ predicate on the "is_regular" field.
func IsRegularNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsRegular, v))
}

// IsSimplifiedEQ applies the EQ predicate on the "is_simplified" field.
func IsSimplifiedEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsSimplified, v))
}

// IsSimplifiedNEQ applies the NEQ predicate on the "is_simplified" field.
func IsSimplifiedNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsSimplified, v))
}

// IsTraditionalEQ applies the EQ predicate on the "is_traditional" field.
func IsTraditionalEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsTraditional, v))
}

// IsTraditionalNEQ applies the NEQ predicate on the "is_traditional" field.
func IsTraditionalNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsTraditional, v))
}

// IsKangXiEQ applies the EQ predicate on the "is_kang_xi" field.
func IsKangXiEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsKangXi, v))
}

// IsKangXiNEQ applies the NEQ predicate on the "is_kang_xi" field.
func IsKangXiNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsKangXi, v))
}

// IsVariantEQ applies the EQ predicate on the "is_variant" field.
func IsVariantEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsVariant, v))
}

// IsVariantNEQ applies the NEQ predicate on the "is_variant" field.
func IsVariantNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsVariant, v))
}

// IsScienceEQ applies the EQ predicate on the "is_science" field.
func IsScienceEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldIsScience, v))
}

// IsScienceNEQ applies the NEQ predicate on the "is_science" field.
func IsScienceNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldIsScience, v))
}

// ScienceStrokeEQ applies the EQ predicate on the "science_stroke" field.
func ScienceStrokeEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldScienceStroke, v))
}

// ScienceStrokeNEQ applies the NEQ predicate on the "science_stroke" field.
func ScienceStrokeNEQ(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldScienceStroke, v))
}

// ScienceStrokeIn applies the In predicate on the "science_stroke" field.
func ScienceStrokeIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldScienceStroke, vs...))
}

// ScienceStrokeNotIn applies the NotIn predicate on the "science_stroke" field.
func ScienceStrokeNotIn(vs ...int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldScienceStroke, vs...))
}

// ScienceStrokeGT applies the GT predicate on the "science_stroke" field.
func ScienceStrokeGT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldScienceStroke, v))
}

// ScienceStrokeGTE applies the GTE predicate on the "science_stroke" field.
func ScienceStrokeGTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldScienceStroke, v))
}

// ScienceStrokeLT applies the LT predicate on the "science_stroke" field.
func ScienceStrokeLT(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldScienceStroke, v))
}

// ScienceStrokeLTE applies the LTE predicate on the "science_stroke" field.
func ScienceStrokeLTE(v int) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldScienceStroke, v))
}

// WuXingEQ applies the EQ predicate on the "wu_xing" field.
func WuXingEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldWuXing, v))
}

// WuXingNEQ applies the NEQ predicate on the "wu_xing" field.
func WuXingNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldWuXing, v))
}

// WuXingIn applies the In predicate on the "wu_xing" field.
func WuXingIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldWuXing, vs...))
}

// WuXingNotIn applies the NotIn predicate on the "wu_xing" field.
func WuXingNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldWuXing, vs...))
}

// WuXingGT applies the GT predicate on the "wu_xing" field.
func WuXingGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldWuXing, v))
}

// WuXingGTE applies the GTE predicate on the "wu_xing" field.
func WuXingGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldWuXing, v))
}

// WuXingLT applies the LT predicate on the "wu_xing" field.
func WuXingLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldWuXing, v))
}

// WuXingLTE applies the LTE predicate on the "wu_xing" field.
func WuXingLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldWuXing, v))
}

// WuXingContains applies the Contains predicate on the "wu_xing" field.
func WuXingContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldWuXing, v))
}

// WuXingHasPrefix applies the HasPrefix predicate on the "wu_xing" field.
func WuXingHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldWuXing, v))
}

// WuXingHasSuffix applies the HasSuffix predicate on the "wu_xing" field.
func WuXingHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldWuXing, v))
}

// WuXingEqualFold applies the EqualFold predicate on the "wu_xing" field.
func WuXingEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldWuXing, v))
}

// WuXingContainsFold applies the ContainsFold predicate on the "wu_xing" field.
func WuXingContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldWuXing, v))
}

// LuckyEQ applies the EQ predicate on the "lucky" field.
func LuckyEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldLucky, v))
}

// LuckyNEQ applies the NEQ predicate on the "lucky" field.
func LuckyNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldLucky, v))
}

// LuckyIn applies the In predicate on the "lucky" field.
func LuckyIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldLucky, vs...))
}

// LuckyNotIn applies the NotIn predicate on the "lucky" field.
func LuckyNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldLucky, vs...))
}

// LuckyGT applies the GT predicate on the "lucky" field.
func LuckyGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldLucky, v))
}

// LuckyGTE applies the GTE predicate on the "lucky" field.
func LuckyGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldLucky, v))
}

// LuckyLT applies the LT predicate on the "lucky" field.
func LuckyLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldLucky, v))
}

// LuckyLTE applies the LTE predicate on the "lucky" field.
func LuckyLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldLucky, v))
}

// LuckyContains applies the Contains predicate on the "lucky" field.
func LuckyContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldLucky, v))
}

// LuckyHasPrefix applies the HasPrefix predicate on the "lucky" field.
func LuckyHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldLucky, v))
}

// LuckyHasSuffix applies the HasSuffix predicate on the "lucky" field.
func LuckyHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldLucky, v))
}

// LuckyEqualFold applies the EqualFold predicate on the "lucky" field.
func LuckyEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldLucky, v))
}

// LuckyContainsFold applies the ContainsFold predicate on the "lucky" field.
func LuckyContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldLucky, v))
}

// ExplanationEQ applies the EQ predicate on the "explanation" field.
func ExplanationEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldExplanation, v))
}

// ExplanationNEQ applies the NEQ predicate on the "explanation" field.
func ExplanationNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldExplanation, v))
}

// ExplanationIn applies the In predicate on the "explanation" field.
func ExplanationIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldExplanation, vs...))
}

// ExplanationNotIn applies the NotIn predicate on the "explanation" field.
func ExplanationNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldExplanation, vs...))
}

// ExplanationGT applies the GT predicate on the "explanation" field.
func ExplanationGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldExplanation, v))
}

// ExplanationGTE applies the GTE predicate on the "explanation" field.
func ExplanationGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldExplanation, v))
}

// ExplanationLT applies the LT predicate on the "explanation" field.
func ExplanationLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldExplanation, v))
}

// ExplanationLTE applies the LTE predicate on the "explanation" field.
func ExplanationLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldExplanation, v))
}

// ExplanationContains applies the Contains predicate on the "explanation" field.
func ExplanationContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldExplanation, v))
}

// ExplanationHasPrefix applies the HasPrefix predicate on the "explanation" field.
func ExplanationHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldExplanation, v))
}

// ExplanationHasSuffix applies the HasSuffix predicate on the "explanation" field.
func ExplanationHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldExplanation, v))
}

// ExplanationEqualFold applies the EqualFold predicate on the "explanation" field.
func ExplanationEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldExplanation, v))
}

// ExplanationContainsFold applies the ContainsFold predicate on the "explanation" field.
func ExplanationContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldExplanation, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldContainsFold(FieldComment, v))
}

// NeedFixEQ applies the EQ predicate on the "need_fix" field.
func NeedFixEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldEQ(FieldNeedFix, v))
}

// NeedFixNEQ applies the NEQ predicate on the "need_fix" field.
func NeedFixNEQ(v bool) predicate.NCharacter {
	return predicate.NCharacter(sql.FieldNEQ(FieldNeedFix, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NCharacter) predicate.NCharacter {
	return predicate.NCharacter(func(s *sql.Selector) {
		p(s.Not())
	})
}
