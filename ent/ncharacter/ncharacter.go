// Code generated by ent, DO NOT EDIT.

package ncharacter

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ncharacter type in the database.
	Label = "ncharacter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPinYin holds the string denoting the pin_yin field in the database.
	FieldPinYin = "pin_yin"
	// FieldCh holds the string denoting the ch field in the database.
	FieldCh = "ch"
	// FieldChStroke holds the string denoting the ch_stroke field in the database.
	FieldChStroke = "ch_stroke"
	// FieldChType holds the string denoting the ch_type field in the database.
	FieldChType = "ch_type"
	// FieldRadical holds the string denoting the radical field in the database.
	FieldRadical = "radical"
	// FieldRadicalStroke holds the string denoting the radical_stroke field in the database.
	FieldRadicalStroke = "radical_stroke"
	// FieldRelate holds the string denoting the relate field in the database.
	FieldRelate = "relate"
	// FieldRelateKangXi holds the string denoting the relate_kang_xi field in the database.
	FieldRelateKangXi = "relate_kang_xi"
	// FieldRelateTraditional holds the string denoting the relate_traditional field in the database.
	FieldRelateTraditional = "relate_traditional"
	// FieldRelateVariant holds the string denoting the relate_variant field in the database.
	FieldRelateVariant = "relate_variant"
	// FieldIsNameScience holds the string denoting the is_name_science field in the database.
	FieldIsNameScience = "is_name_science"
	// FieldNameScienceChStroke holds the string denoting the name_science_ch_stroke field in the database.
	FieldNameScienceChStroke = "name_science_ch_stroke"
	// FieldIsRegular holds the string denoting the is_regular field in the database.
	FieldIsRegular = "is_regular"
	// FieldWuXing holds the string denoting the wu_xing field in the database.
	FieldWuXing = "wu_xing"
	// FieldLucky holds the string denoting the lucky field in the database.
	FieldLucky = "lucky"
	// FieldExplanation holds the string denoting the explanation field in the database.
	FieldExplanation = "explanation"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// Table holds the table name of the ncharacter in the database.
	Table = "n_character"
)

// Columns holds all SQL columns for ncharacter fields.
var Columns = []string{
	FieldID,
	FieldPinYin,
	FieldCh,
	FieldChStroke,
	FieldChType,
	FieldRadical,
	FieldRadicalStroke,
	FieldRelate,
	FieldRelateKangXi,
	FieldRelateTraditional,
	FieldRelateVariant,
	FieldIsNameScience,
	FieldNameScienceChStroke,
	FieldIsRegular,
	FieldWuXing,
	FieldLucky,
	FieldExplanation,
	FieldComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultChType holds the default value on creation for the "ch_type" field.
	DefaultChType int
)

// OrderOption defines the ordering options for the NCharacter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPinYin orders the results by the pin_yin field.
func ByPinYin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPinYin, opts...).ToFunc()
}

// ByCh orders the results by the ch field.
func ByCh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCh, opts...).ToFunc()
}

// ByChStroke orders the results by the ch_stroke field.
func ByChStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChStroke, opts...).ToFunc()
}

// ByChType orders the results by the ch_type field.
func ByChType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChType, opts...).ToFunc()
}

// ByRadical orders the results by the radical field.
func ByRadical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadical, opts...).ToFunc()
}

// ByRadicalStroke orders the results by the radical_stroke field.
func ByRadicalStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRadicalStroke, opts...).ToFunc()
}

// ByRelate orders the results by the relate field.
func ByRelate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelate, opts...).ToFunc()
}

// ByRelateKangXi orders the results by the relate_kang_xi field.
func ByRelateKangXi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateKangXi, opts...).ToFunc()
}

// ByRelateTraditional orders the results by the relate_traditional field.
func ByRelateTraditional(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelateTraditional, opts...).ToFunc()
}

// ByIsNameScience orders the results by the is_name_science field.
func ByIsNameScience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNameScience, opts...).ToFunc()
}

// ByNameScienceChStroke orders the results by the name_science_ch_stroke field.
func ByNameScienceChStroke(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameScienceChStroke, opts...).ToFunc()
}

// ByIsRegular orders the results by the is_regular field.
func ByIsRegular(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRegular, opts...).ToFunc()
}

// ByWuXing orders the results by the wu_xing field.
func ByWuXing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWuXing, opts...).ToFunc()
}

// ByLucky orders the results by the lucky field.
func ByLucky(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLucky, opts...).ToFunc()
}

// ByExplanation orders the results by the explanation field.
func ByExplanation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExplanation, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}
