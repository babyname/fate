// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/character"
	"github.com/babyname/fate/ent/predicate"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPinYin sets the "pin_yin" field.
func (cu *CharacterUpdate) SetPinYin(s []string) *CharacterUpdate {
	cu.mutation.SetPinYin(s)
	return cu
}

// AppendPinYin appends s to the "pin_yin" field.
func (cu *CharacterUpdate) AppendPinYin(s []string) *CharacterUpdate {
	cu.mutation.AppendPinYin(s)
	return cu
}

// SetCh sets the "ch" field.
func (cu *CharacterUpdate) SetCh(s string) *CharacterUpdate {
	cu.mutation.SetCh(s)
	return cu
}

// SetRadical sets the "radical" field.
func (cu *CharacterUpdate) SetRadical(s string) *CharacterUpdate {
	cu.mutation.SetRadical(s)
	return cu
}

// SetRadicalStroke sets the "radical_stroke" field.
func (cu *CharacterUpdate) SetRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.ResetRadicalStroke()
	cu.mutation.SetRadicalStroke(i)
	return cu
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (cu *CharacterUpdate) AddRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.AddRadicalStroke(i)
	return cu
}

// SetStroke sets the "stroke" field.
func (cu *CharacterUpdate) SetStroke(i int) *CharacterUpdate {
	cu.mutation.ResetStroke()
	cu.mutation.SetStroke(i)
	return cu
}

// AddStroke adds i to the "stroke" field.
func (cu *CharacterUpdate) AddStroke(i int) *CharacterUpdate {
	cu.mutation.AddStroke(i)
	return cu
}

// SetIsKangXi sets the "is_kang_xi" field.
func (cu *CharacterUpdate) SetIsKangXi(b bool) *CharacterUpdate {
	cu.mutation.SetIsKangXi(b)
	return cu
}

// SetKangXi sets the "kang_xi" field.
func (cu *CharacterUpdate) SetKangXi(s string) *CharacterUpdate {
	cu.mutation.SetKangXi(s)
	return cu
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (cu *CharacterUpdate) SetKangXiStroke(i int) *CharacterUpdate {
	cu.mutation.ResetKangXiStroke()
	cu.mutation.SetKangXiStroke(i)
	return cu
}

// AddKangXiStroke adds i to the "kang_xi_stroke" field.
func (cu *CharacterUpdate) AddKangXiStroke(i int) *CharacterUpdate {
	cu.mutation.AddKangXiStroke(i)
	return cu
}

// SetSimpleRadical sets the "simple_radical" field.
func (cu *CharacterUpdate) SetSimpleRadical(s string) *CharacterUpdate {
	cu.mutation.SetSimpleRadical(s)
	return cu
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (cu *CharacterUpdate) SetSimpleRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.ResetSimpleRadicalStroke()
	cu.mutation.SetSimpleRadicalStroke(i)
	return cu
}

// AddSimpleRadicalStroke adds i to the "simple_radical_stroke" field.
func (cu *CharacterUpdate) AddSimpleRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.AddSimpleRadicalStroke(i)
	return cu
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (cu *CharacterUpdate) SetSimpleTotalStroke(i int) *CharacterUpdate {
	cu.mutation.ResetSimpleTotalStroke()
	cu.mutation.SetSimpleTotalStroke(i)
	return cu
}

// AddSimpleTotalStroke adds i to the "simple_total_stroke" field.
func (cu *CharacterUpdate) AddSimpleTotalStroke(i int) *CharacterUpdate {
	cu.mutation.AddSimpleTotalStroke(i)
	return cu
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (cu *CharacterUpdate) SetTraditionalRadical(s string) *CharacterUpdate {
	cu.mutation.SetTraditionalRadical(s)
	return cu
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (cu *CharacterUpdate) SetTraditionalRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.ResetTraditionalRadicalStroke()
	cu.mutation.SetTraditionalRadicalStroke(i)
	return cu
}

// AddTraditionalRadicalStroke adds i to the "traditional_radical_stroke" field.
func (cu *CharacterUpdate) AddTraditionalRadicalStroke(i int) *CharacterUpdate {
	cu.mutation.AddTraditionalRadicalStroke(i)
	return cu
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (cu *CharacterUpdate) SetTraditionalTotalStroke(i int) *CharacterUpdate {
	cu.mutation.ResetTraditionalTotalStroke()
	cu.mutation.SetTraditionalTotalStroke(i)
	return cu
}

// AddTraditionalTotalStroke adds i to the "traditional_total_stroke" field.
func (cu *CharacterUpdate) AddTraditionalTotalStroke(i int) *CharacterUpdate {
	cu.mutation.AddTraditionalTotalStroke(i)
	return cu
}

// SetNameScience sets the "name_science" field.
func (cu *CharacterUpdate) SetNameScience(b bool) *CharacterUpdate {
	cu.mutation.SetNameScience(b)
	return cu
}

// SetWuXing sets the "wu_xing" field.
func (cu *CharacterUpdate) SetWuXing(s string) *CharacterUpdate {
	cu.mutation.SetWuXing(s)
	return cu
}

// SetLucky sets the "lucky" field.
func (cu *CharacterUpdate) SetLucky(s string) *CharacterUpdate {
	cu.mutation.SetLucky(s)
	return cu
}

// SetRegular sets the "regular" field.
func (cu *CharacterUpdate) SetRegular(b bool) *CharacterUpdate {
	cu.mutation.SetRegular(b)
	return cu
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (cu *CharacterUpdate) SetTraditionalCharacter(s []string) *CharacterUpdate {
	cu.mutation.SetTraditionalCharacter(s)
	return cu
}

// AppendTraditionalCharacter appends s to the "traditional_character" field.
func (cu *CharacterUpdate) AppendTraditionalCharacter(s []string) *CharacterUpdate {
	cu.mutation.AppendTraditionalCharacter(s)
	return cu
}

// SetVariantCharacter sets the "variant_character" field.
func (cu *CharacterUpdate) SetVariantCharacter(s []string) *CharacterUpdate {
	cu.mutation.SetVariantCharacter(s)
	return cu
}

// AppendVariantCharacter appends s to the "variant_character" field.
func (cu *CharacterUpdate) AppendVariantCharacter(s []string) *CharacterUpdate {
	cu.mutation.AppendVariantCharacter(s)
	return cu
}

// SetComment sets the "comment" field.
func (cu *CharacterUpdate) SetComment(s string) *CharacterUpdate {
	cu.mutation.SetComment(s)
	return cu
}

// SetScienceStroke sets the "science_stroke" field.
func (cu *CharacterUpdate) SetScienceStroke(i int) *CharacterUpdate {
	cu.mutation.ResetScienceStroke()
	cu.mutation.SetScienceStroke(i)
	return cu
}

// AddScienceStroke adds i to the "science_stroke" field.
func (cu *CharacterUpdate) AddScienceStroke(i int) *CharacterUpdate {
	cu.mutation.AddScienceStroke(i)
	return cu
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CharacterMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(character.Table, character.Columns, sqlgraph.NewFieldSpec(character.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.PinYin(); ok {
		_spec.SetField(character.FieldPinYin, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedPinYin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldPinYin, value)
		})
	}
	if value, ok := cu.mutation.Ch(); ok {
		_spec.SetField(character.FieldCh, field.TypeString, value)
	}
	if value, ok := cu.mutation.Radical(); ok {
		_spec.SetField(character.FieldRadical, field.TypeString, value)
	}
	if value, ok := cu.mutation.RadicalStroke(); ok {
		_spec.SetField(character.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(character.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Stroke(); ok {
		_spec.SetField(character.FieldStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStroke(); ok {
		_spec.AddField(character.FieldStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IsKangXi(); ok {
		_spec.SetField(character.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := cu.mutation.KangXi(); ok {
		_spec.SetField(character.FieldKangXi, field.TypeString, value)
	}
	if value, ok := cu.mutation.KangXiStroke(); ok {
		_spec.SetField(character.FieldKangXiStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedKangXiStroke(); ok {
		_spec.AddField(character.FieldKangXiStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.SimpleRadical(); ok {
		_spec.SetField(character.FieldSimpleRadical, field.TypeString, value)
	}
	if value, ok := cu.mutation.SimpleRadicalStroke(); ok {
		_spec.SetField(character.FieldSimpleRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSimpleRadicalStroke(); ok {
		_spec.AddField(character.FieldSimpleRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.SimpleTotalStroke(); ok {
		_spec.SetField(character.FieldSimpleTotalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSimpleTotalStroke(); ok {
		_spec.AddField(character.FieldSimpleTotalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TraditionalRadical(); ok {
		_spec.SetField(character.FieldTraditionalRadical, field.TypeString, value)
	}
	if value, ok := cu.mutation.TraditionalRadicalStroke(); ok {
		_spec.SetField(character.FieldTraditionalRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTraditionalRadicalStroke(); ok {
		_spec.AddField(character.FieldTraditionalRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TraditionalTotalStroke(); ok {
		_spec.SetField(character.FieldTraditionalTotalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTraditionalTotalStroke(); ok {
		_spec.AddField(character.FieldTraditionalTotalStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.NameScience(); ok {
		_spec.SetField(character.FieldNameScience, field.TypeBool, value)
	}
	if value, ok := cu.mutation.WuXing(); ok {
		_spec.SetField(character.FieldWuXing, field.TypeString, value)
	}
	if value, ok := cu.mutation.Lucky(); ok {
		_spec.SetField(character.FieldLucky, field.TypeString, value)
	}
	if value, ok := cu.mutation.Regular(); ok {
		_spec.SetField(character.FieldRegular, field.TypeBool, value)
	}
	if value, ok := cu.mutation.TraditionalCharacter(); ok {
		_spec.SetField(character.FieldTraditionalCharacter, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedTraditionalCharacter(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldTraditionalCharacter, value)
		})
	}
	if value, ok := cu.mutation.VariantCharacter(); ok {
		_spec.SetField(character.FieldVariantCharacter, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedVariantCharacter(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldVariantCharacter, value)
		})
	}
	if value, ok := cu.mutation.Comment(); ok {
		_spec.SetField(character.FieldComment, field.TypeString, value)
	}
	if value, ok := cu.mutation.ScienceStroke(); ok {
		_spec.SetField(character.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedScienceStroke(); ok {
		_spec.AddField(character.FieldScienceStroke, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetPinYin sets the "pin_yin" field.
func (cuo *CharacterUpdateOne) SetPinYin(s []string) *CharacterUpdateOne {
	cuo.mutation.SetPinYin(s)
	return cuo
}

// AppendPinYin appends s to the "pin_yin" field.
func (cuo *CharacterUpdateOne) AppendPinYin(s []string) *CharacterUpdateOne {
	cuo.mutation.AppendPinYin(s)
	return cuo
}

// SetCh sets the "ch" field.
func (cuo *CharacterUpdateOne) SetCh(s string) *CharacterUpdateOne {
	cuo.mutation.SetCh(s)
	return cuo
}

// SetRadical sets the "radical" field.
func (cuo *CharacterUpdateOne) SetRadical(s string) *CharacterUpdateOne {
	cuo.mutation.SetRadical(s)
	return cuo
}

// SetRadicalStroke sets the "radical_stroke" field.
func (cuo *CharacterUpdateOne) SetRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetRadicalStroke()
	cuo.mutation.SetRadicalStroke(i)
	return cuo
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (cuo *CharacterUpdateOne) AddRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddRadicalStroke(i)
	return cuo
}

// SetStroke sets the "stroke" field.
func (cuo *CharacterUpdateOne) SetStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetStroke()
	cuo.mutation.SetStroke(i)
	return cuo
}

// AddStroke adds i to the "stroke" field.
func (cuo *CharacterUpdateOne) AddStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddStroke(i)
	return cuo
}

// SetIsKangXi sets the "is_kang_xi" field.
func (cuo *CharacterUpdateOne) SetIsKangXi(b bool) *CharacterUpdateOne {
	cuo.mutation.SetIsKangXi(b)
	return cuo
}

// SetKangXi sets the "kang_xi" field.
func (cuo *CharacterUpdateOne) SetKangXi(s string) *CharacterUpdateOne {
	cuo.mutation.SetKangXi(s)
	return cuo
}

// SetKangXiStroke sets the "kang_xi_stroke" field.
func (cuo *CharacterUpdateOne) SetKangXiStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetKangXiStroke()
	cuo.mutation.SetKangXiStroke(i)
	return cuo
}

// AddKangXiStroke adds i to the "kang_xi_stroke" field.
func (cuo *CharacterUpdateOne) AddKangXiStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddKangXiStroke(i)
	return cuo
}

// SetSimpleRadical sets the "simple_radical" field.
func (cuo *CharacterUpdateOne) SetSimpleRadical(s string) *CharacterUpdateOne {
	cuo.mutation.SetSimpleRadical(s)
	return cuo
}

// SetSimpleRadicalStroke sets the "simple_radical_stroke" field.
func (cuo *CharacterUpdateOne) SetSimpleRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSimpleRadicalStroke()
	cuo.mutation.SetSimpleRadicalStroke(i)
	return cuo
}

// AddSimpleRadicalStroke adds i to the "simple_radical_stroke" field.
func (cuo *CharacterUpdateOne) AddSimpleRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddSimpleRadicalStroke(i)
	return cuo
}

// SetSimpleTotalStroke sets the "simple_total_stroke" field.
func (cuo *CharacterUpdateOne) SetSimpleTotalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSimpleTotalStroke()
	cuo.mutation.SetSimpleTotalStroke(i)
	return cuo
}

// AddSimpleTotalStroke adds i to the "simple_total_stroke" field.
func (cuo *CharacterUpdateOne) AddSimpleTotalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddSimpleTotalStroke(i)
	return cuo
}

// SetTraditionalRadical sets the "traditional_radical" field.
func (cuo *CharacterUpdateOne) SetTraditionalRadical(s string) *CharacterUpdateOne {
	cuo.mutation.SetTraditionalRadical(s)
	return cuo
}

// SetTraditionalRadicalStroke sets the "traditional_radical_stroke" field.
func (cuo *CharacterUpdateOne) SetTraditionalRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetTraditionalRadicalStroke()
	cuo.mutation.SetTraditionalRadicalStroke(i)
	return cuo
}

// AddTraditionalRadicalStroke adds i to the "traditional_radical_stroke" field.
func (cuo *CharacterUpdateOne) AddTraditionalRadicalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddTraditionalRadicalStroke(i)
	return cuo
}

// SetTraditionalTotalStroke sets the "traditional_total_stroke" field.
func (cuo *CharacterUpdateOne) SetTraditionalTotalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetTraditionalTotalStroke()
	cuo.mutation.SetTraditionalTotalStroke(i)
	return cuo
}

// AddTraditionalTotalStroke adds i to the "traditional_total_stroke" field.
func (cuo *CharacterUpdateOne) AddTraditionalTotalStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddTraditionalTotalStroke(i)
	return cuo
}

// SetNameScience sets the "name_science" field.
func (cuo *CharacterUpdateOne) SetNameScience(b bool) *CharacterUpdateOne {
	cuo.mutation.SetNameScience(b)
	return cuo
}

// SetWuXing sets the "wu_xing" field.
func (cuo *CharacterUpdateOne) SetWuXing(s string) *CharacterUpdateOne {
	cuo.mutation.SetWuXing(s)
	return cuo
}

// SetLucky sets the "lucky" field.
func (cuo *CharacterUpdateOne) SetLucky(s string) *CharacterUpdateOne {
	cuo.mutation.SetLucky(s)
	return cuo
}

// SetRegular sets the "regular" field.
func (cuo *CharacterUpdateOne) SetRegular(b bool) *CharacterUpdateOne {
	cuo.mutation.SetRegular(b)
	return cuo
}

// SetTraditionalCharacter sets the "traditional_character" field.
func (cuo *CharacterUpdateOne) SetTraditionalCharacter(s []string) *CharacterUpdateOne {
	cuo.mutation.SetTraditionalCharacter(s)
	return cuo
}

// AppendTraditionalCharacter appends s to the "traditional_character" field.
func (cuo *CharacterUpdateOne) AppendTraditionalCharacter(s []string) *CharacterUpdateOne {
	cuo.mutation.AppendTraditionalCharacter(s)
	return cuo
}

// SetVariantCharacter sets the "variant_character" field.
func (cuo *CharacterUpdateOne) SetVariantCharacter(s []string) *CharacterUpdateOne {
	cuo.mutation.SetVariantCharacter(s)
	return cuo
}

// AppendVariantCharacter appends s to the "variant_character" field.
func (cuo *CharacterUpdateOne) AppendVariantCharacter(s []string) *CharacterUpdateOne {
	cuo.mutation.AppendVariantCharacter(s)
	return cuo
}

// SetComment sets the "comment" field.
func (cuo *CharacterUpdateOne) SetComment(s string) *CharacterUpdateOne {
	cuo.mutation.SetComment(s)
	return cuo
}

// SetScienceStroke sets the "science_stroke" field.
func (cuo *CharacterUpdateOne) SetScienceStroke(i int) *CharacterUpdateOne {
	cuo.mutation.ResetScienceStroke()
	cuo.mutation.SetScienceStroke(i)
	return cuo
}

// AddScienceStroke adds i to the "science_stroke" field.
func (cuo *CharacterUpdateOne) AddScienceStroke(i int) *CharacterUpdateOne {
	cuo.mutation.AddScienceStroke(i)
	return cuo
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cuo *CharacterUpdateOne) Where(ps ...predicate.Character) *CharacterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	return withHooks[*Character, CharacterMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	_spec := sqlgraph.NewUpdateSpec(character.Table, character.Columns, sqlgraph.NewFieldSpec(character.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.PinYin(); ok {
		_spec.SetField(character.FieldPinYin, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedPinYin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldPinYin, value)
		})
	}
	if value, ok := cuo.mutation.Ch(); ok {
		_spec.SetField(character.FieldCh, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Radical(); ok {
		_spec.SetField(character.FieldRadical, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RadicalStroke(); ok {
		_spec.SetField(character.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(character.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Stroke(); ok {
		_spec.SetField(character.FieldStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStroke(); ok {
		_spec.AddField(character.FieldStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IsKangXi(); ok {
		_spec.SetField(character.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.KangXi(); ok {
		_spec.SetField(character.FieldKangXi, field.TypeString, value)
	}
	if value, ok := cuo.mutation.KangXiStroke(); ok {
		_spec.SetField(character.FieldKangXiStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedKangXiStroke(); ok {
		_spec.AddField(character.FieldKangXiStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.SimpleRadical(); ok {
		_spec.SetField(character.FieldSimpleRadical, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SimpleRadicalStroke(); ok {
		_spec.SetField(character.FieldSimpleRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSimpleRadicalStroke(); ok {
		_spec.AddField(character.FieldSimpleRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.SimpleTotalStroke(); ok {
		_spec.SetField(character.FieldSimpleTotalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSimpleTotalStroke(); ok {
		_spec.AddField(character.FieldSimpleTotalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TraditionalRadical(); ok {
		_spec.SetField(character.FieldTraditionalRadical, field.TypeString, value)
	}
	if value, ok := cuo.mutation.TraditionalRadicalStroke(); ok {
		_spec.SetField(character.FieldTraditionalRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTraditionalRadicalStroke(); ok {
		_spec.AddField(character.FieldTraditionalRadicalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TraditionalTotalStroke(); ok {
		_spec.SetField(character.FieldTraditionalTotalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTraditionalTotalStroke(); ok {
		_spec.AddField(character.FieldTraditionalTotalStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.NameScience(); ok {
		_spec.SetField(character.FieldNameScience, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.WuXing(); ok {
		_spec.SetField(character.FieldWuXing, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Lucky(); ok {
		_spec.SetField(character.FieldLucky, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Regular(); ok {
		_spec.SetField(character.FieldRegular, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.TraditionalCharacter(); ok {
		_spec.SetField(character.FieldTraditionalCharacter, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedTraditionalCharacter(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldTraditionalCharacter, value)
		})
	}
	if value, ok := cuo.mutation.VariantCharacter(); ok {
		_spec.SetField(character.FieldVariantCharacter, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedVariantCharacter(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, character.FieldVariantCharacter, value)
		})
	}
	if value, ok := cuo.mutation.Comment(); ok {
		_spec.SetField(character.FieldComment, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ScienceStroke(); ok {
		_spec.SetField(character.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedScienceStroke(); ok {
		_spec.AddField(character.FieldScienceStroke, field.TypeInt, value)
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
