// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/ncharacter"
	"github.com/babyname/fate/ent/predicate"
)

// NCharacterUpdate is the builder for updating NCharacter entities.
type NCharacterUpdate struct {
	config
	hooks    []Hook
	mutation *NCharacterMutation
}

// Where appends a list predicates to the NCharacterUpdate builder.
func (nu *NCharacterUpdate) Where(ps ...predicate.NCharacter) *NCharacterUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetPinYin sets the "pin_yin" field.
func (nu *NCharacterUpdate) SetPinYin(s []string) *NCharacterUpdate {
	nu.mutation.SetPinYin(s)
	return nu
}

// AppendPinYin appends s to the "pin_yin" field.
func (nu *NCharacterUpdate) AppendPinYin(s []string) *NCharacterUpdate {
	nu.mutation.AppendPinYin(s)
	return nu
}

// SetChar sets the "char" field.
func (nu *NCharacterUpdate) SetChar(s string) *NCharacterUpdate {
	nu.mutation.SetChar(s)
	return nu
}

// SetNillableChar sets the "char" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableChar(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetChar(*s)
	}
	return nu
}

// SetCharStroke sets the "char_stroke" field.
func (nu *NCharacterUpdate) SetCharStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetCharStroke()
	nu.mutation.SetCharStroke(i)
	return nu
}

// SetNillableCharStroke sets the "char_stroke" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableCharStroke(i *int) *NCharacterUpdate {
	if i != nil {
		nu.SetCharStroke(*i)
	}
	return nu
}

// AddCharStroke adds i to the "char_stroke" field.
func (nu *NCharacterUpdate) AddCharStroke(i int) *NCharacterUpdate {
	nu.mutation.AddCharStroke(i)
	return nu
}

// SetRadical sets the "radical" field.
func (nu *NCharacterUpdate) SetRadical(s string) *NCharacterUpdate {
	nu.mutation.SetRadical(s)
	return nu
}

// SetNillableRadical sets the "radical" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableRadical(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetRadical(*s)
	}
	return nu
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nu *NCharacterUpdate) SetRadicalStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetRadicalStroke()
	nu.mutation.SetRadicalStroke(i)
	return nu
}

// SetNillableRadicalStroke sets the "radical_stroke" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableRadicalStroke(i *int) *NCharacterUpdate {
	if i != nil {
		nu.SetRadicalStroke(*i)
	}
	return nu
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (nu *NCharacterUpdate) AddRadicalStroke(i int) *NCharacterUpdate {
	nu.mutation.AddRadicalStroke(i)
	return nu
}

// SetIsRegular sets the "is_regular" field.
func (nu *NCharacterUpdate) SetIsRegular(b bool) *NCharacterUpdate {
	nu.mutation.SetIsRegular(b)
	return nu
}

// SetNillableIsRegular sets the "is_regular" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsRegular(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsRegular(*b)
	}
	return nu
}

// SetIsSimplified sets the "is_simplified" field.
func (nu *NCharacterUpdate) SetIsSimplified(b bool) *NCharacterUpdate {
	nu.mutation.SetIsSimplified(b)
	return nu
}

// SetNillableIsSimplified sets the "is_simplified" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsSimplified(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsSimplified(*b)
	}
	return nu
}

// SetSimplifiedID sets the "simplified_id" field.
func (nu *NCharacterUpdate) SetSimplifiedID(i []int) *NCharacterUpdate {
	nu.mutation.SetSimplifiedID(i)
	return nu
}

// AppendSimplifiedID appends i to the "simplified_id" field.
func (nu *NCharacterUpdate) AppendSimplifiedID(i []int) *NCharacterUpdate {
	nu.mutation.AppendSimplifiedID(i)
	return nu
}

// SetIsTraditional sets the "is_traditional" field.
func (nu *NCharacterUpdate) SetIsTraditional(b bool) *NCharacterUpdate {
	nu.mutation.SetIsTraditional(b)
	return nu
}

// SetNillableIsTraditional sets the "is_traditional" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsTraditional(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsTraditional(*b)
	}
	return nu
}

// SetTraditionalID sets the "traditional_id" field.
func (nu *NCharacterUpdate) SetTraditionalID(i []int) *NCharacterUpdate {
	nu.mutation.SetTraditionalID(i)
	return nu
}

// AppendTraditionalID appends i to the "traditional_id" field.
func (nu *NCharacterUpdate) AppendTraditionalID(i []int) *NCharacterUpdate {
	nu.mutation.AppendTraditionalID(i)
	return nu
}

// SetIsKangXi sets the "is_kang_xi" field.
func (nu *NCharacterUpdate) SetIsKangXi(b bool) *NCharacterUpdate {
	nu.mutation.SetIsKangXi(b)
	return nu
}

// SetNillableIsKangXi sets the "is_kang_xi" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsKangXi(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsKangXi(*b)
	}
	return nu
}

// SetKangXiID sets the "kang_xi_id" field.
func (nu *NCharacterUpdate) SetKangXiID(i []int) *NCharacterUpdate {
	nu.mutation.SetKangXiID(i)
	return nu
}

// AppendKangXiID appends i to the "kang_xi_id" field.
func (nu *NCharacterUpdate) AppendKangXiID(i []int) *NCharacterUpdate {
	nu.mutation.AppendKangXiID(i)
	return nu
}

// SetIsVariant sets the "is_variant" field.
func (nu *NCharacterUpdate) SetIsVariant(b bool) *NCharacterUpdate {
	nu.mutation.SetIsVariant(b)
	return nu
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsVariant(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsVariant(*b)
	}
	return nu
}

// SetVariantID sets the "variant_id" field.
func (nu *NCharacterUpdate) SetVariantID(i []int) *NCharacterUpdate {
	nu.mutation.SetVariantID(i)
	return nu
}

// AppendVariantID appends i to the "variant_id" field.
func (nu *NCharacterUpdate) AppendVariantID(i []int) *NCharacterUpdate {
	nu.mutation.AppendVariantID(i)
	return nu
}

// SetIsScience sets the "is_science" field.
func (nu *NCharacterUpdate) SetIsScience(b bool) *NCharacterUpdate {
	nu.mutation.SetIsScience(b)
	return nu
}

// SetNillableIsScience sets the "is_science" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableIsScience(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetIsScience(*b)
	}
	return nu
}

// SetScienceStroke sets the "science_stroke" field.
func (nu *NCharacterUpdate) SetScienceStroke(i int) *NCharacterUpdate {
	nu.mutation.ResetScienceStroke()
	nu.mutation.SetScienceStroke(i)
	return nu
}

// SetNillableScienceStroke sets the "science_stroke" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableScienceStroke(i *int) *NCharacterUpdate {
	if i != nil {
		nu.SetScienceStroke(*i)
	}
	return nu
}

// AddScienceStroke adds i to the "science_stroke" field.
func (nu *NCharacterUpdate) AddScienceStroke(i int) *NCharacterUpdate {
	nu.mutation.AddScienceStroke(i)
	return nu
}

// SetWuXing sets the "wu_xing" field.
func (nu *NCharacterUpdate) SetWuXing(s string) *NCharacterUpdate {
	nu.mutation.SetWuXing(s)
	return nu
}

// SetNillableWuXing sets the "wu_xing" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableWuXing(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetWuXing(*s)
	}
	return nu
}

// SetLucky sets the "lucky" field.
func (nu *NCharacterUpdate) SetLucky(s string) *NCharacterUpdate {
	nu.mutation.SetLucky(s)
	return nu
}

// SetNillableLucky sets the "lucky" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableLucky(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetLucky(*s)
	}
	return nu
}

// SetExplanation sets the "explanation" field.
func (nu *NCharacterUpdate) SetExplanation(s string) *NCharacterUpdate {
	nu.mutation.SetExplanation(s)
	return nu
}

// SetNillableExplanation sets the "explanation" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableExplanation(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetExplanation(*s)
	}
	return nu
}

// SetComment sets the "comment" field.
func (nu *NCharacterUpdate) SetComment(s string) *NCharacterUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableComment(s *string) *NCharacterUpdate {
	if s != nil {
		nu.SetComment(*s)
	}
	return nu
}

// SetNeedFix sets the "need_fix" field.
func (nu *NCharacterUpdate) SetNeedFix(b bool) *NCharacterUpdate {
	nu.mutation.SetNeedFix(b)
	return nu
}

// SetNillableNeedFix sets the "need_fix" field if the given value is not nil.
func (nu *NCharacterUpdate) SetNillableNeedFix(b *bool) *NCharacterUpdate {
	if b != nil {
		nu.SetNeedFix(*b)
	}
	return nu
}

// Mutation returns the NCharacterMutation object of the builder.
func (nu *NCharacterUpdate) Mutation() *NCharacterMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NCharacterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, NCharacterMutation](ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NCharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NCharacterUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NCharacterUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NCharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ncharacter.Table, ncharacter.Columns, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedPinYin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldPinYin, value)
		})
	}
	if value, ok := nu.mutation.Char(); ok {
		_spec.SetField(ncharacter.FieldChar, field.TypeString, value)
	}
	if value, ok := nu.mutation.CharStroke(); ok {
		_spec.SetField(ncharacter.FieldCharStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedCharStroke(); ok {
		_spec.AddField(ncharacter.FieldCharStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
	}
	if value, ok := nu.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.IsRegular(); ok {
		_spec.SetField(ncharacter.FieldIsRegular, field.TypeBool, value)
	}
	if value, ok := nu.mutation.IsSimplified(); ok {
		_spec.SetField(ncharacter.FieldIsSimplified, field.TypeBool, value)
	}
	if value, ok := nu.mutation.SimplifiedID(); ok {
		_spec.SetField(ncharacter.FieldSimplifiedID, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedSimplifiedID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldSimplifiedID, value)
		})
	}
	if value, ok := nu.mutation.IsTraditional(); ok {
		_spec.SetField(ncharacter.FieldIsTraditional, field.TypeBool, value)
	}
	if value, ok := nu.mutation.TraditionalID(); ok {
		_spec.SetField(ncharacter.FieldTraditionalID, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedTraditionalID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldTraditionalID, value)
		})
	}
	if value, ok := nu.mutation.IsKangXi(); ok {
		_spec.SetField(ncharacter.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := nu.mutation.KangXiID(); ok {
		_spec.SetField(ncharacter.FieldKangXiID, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedKangXiID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldKangXiID, value)
		})
	}
	if value, ok := nu.mutation.IsVariant(); ok {
		_spec.SetField(ncharacter.FieldIsVariant, field.TypeBool, value)
	}
	if value, ok := nu.mutation.VariantID(); ok {
		_spec.SetField(ncharacter.FieldVariantID, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedVariantID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldVariantID, value)
		})
	}
	if value, ok := nu.mutation.IsScience(); ok {
		_spec.SetField(ncharacter.FieldIsScience, field.TypeBool, value)
	}
	if value, ok := nu.mutation.ScienceStroke(); ok {
		_spec.SetField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedScienceStroke(); ok {
		_spec.AddField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nu.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
	}
	if value, ok := nu.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
	}
	if value, ok := nu.mutation.Explanation(); ok {
		_spec.SetField(ncharacter.FieldExplanation, field.TypeString, value)
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
	}
	if value, ok := nu.mutation.NeedFix(); ok {
		_spec.SetField(ncharacter.FieldNeedFix, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ncharacter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NCharacterUpdateOne is the builder for updating a single NCharacter entity.
type NCharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NCharacterMutation
}

// SetPinYin sets the "pin_yin" field.
func (nuo *NCharacterUpdateOne) SetPinYin(s []string) *NCharacterUpdateOne {
	nuo.mutation.SetPinYin(s)
	return nuo
}

// AppendPinYin appends s to the "pin_yin" field.
func (nuo *NCharacterUpdateOne) AppendPinYin(s []string) *NCharacterUpdateOne {
	nuo.mutation.AppendPinYin(s)
	return nuo
}

// SetChar sets the "char" field.
func (nuo *NCharacterUpdateOne) SetChar(s string) *NCharacterUpdateOne {
	nuo.mutation.SetChar(s)
	return nuo
}

// SetNillableChar sets the "char" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableChar(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetChar(*s)
	}
	return nuo
}

// SetCharStroke sets the "char_stroke" field.
func (nuo *NCharacterUpdateOne) SetCharStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetCharStroke()
	nuo.mutation.SetCharStroke(i)
	return nuo
}

// SetNillableCharStroke sets the "char_stroke" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableCharStroke(i *int) *NCharacterUpdateOne {
	if i != nil {
		nuo.SetCharStroke(*i)
	}
	return nuo
}

// AddCharStroke adds i to the "char_stroke" field.
func (nuo *NCharacterUpdateOne) AddCharStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddCharStroke(i)
	return nuo
}

// SetRadical sets the "radical" field.
func (nuo *NCharacterUpdateOne) SetRadical(s string) *NCharacterUpdateOne {
	nuo.mutation.SetRadical(s)
	return nuo
}

// SetNillableRadical sets the "radical" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableRadical(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetRadical(*s)
	}
	return nuo
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nuo *NCharacterUpdateOne) SetRadicalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetRadicalStroke()
	nuo.mutation.SetRadicalStroke(i)
	return nuo
}

// SetNillableRadicalStroke sets the "radical_stroke" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableRadicalStroke(i *int) *NCharacterUpdateOne {
	if i != nil {
		nuo.SetRadicalStroke(*i)
	}
	return nuo
}

// AddRadicalStroke adds i to the "radical_stroke" field.
func (nuo *NCharacterUpdateOne) AddRadicalStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddRadicalStroke(i)
	return nuo
}

// SetIsRegular sets the "is_regular" field.
func (nuo *NCharacterUpdateOne) SetIsRegular(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsRegular(b)
	return nuo
}

// SetNillableIsRegular sets the "is_regular" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsRegular(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsRegular(*b)
	}
	return nuo
}

// SetIsSimplified sets the "is_simplified" field.
func (nuo *NCharacterUpdateOne) SetIsSimplified(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsSimplified(b)
	return nuo
}

// SetNillableIsSimplified sets the "is_simplified" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsSimplified(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsSimplified(*b)
	}
	return nuo
}

// SetSimplifiedID sets the "simplified_id" field.
func (nuo *NCharacterUpdateOne) SetSimplifiedID(i []int) *NCharacterUpdateOne {
	nuo.mutation.SetSimplifiedID(i)
	return nuo
}

// AppendSimplifiedID appends i to the "simplified_id" field.
func (nuo *NCharacterUpdateOne) AppendSimplifiedID(i []int) *NCharacterUpdateOne {
	nuo.mutation.AppendSimplifiedID(i)
	return nuo
}

// SetIsTraditional sets the "is_traditional" field.
func (nuo *NCharacterUpdateOne) SetIsTraditional(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsTraditional(b)
	return nuo
}

// SetNillableIsTraditional sets the "is_traditional" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsTraditional(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsTraditional(*b)
	}
	return nuo
}

// SetTraditionalID sets the "traditional_id" field.
func (nuo *NCharacterUpdateOne) SetTraditionalID(i []int) *NCharacterUpdateOne {
	nuo.mutation.SetTraditionalID(i)
	return nuo
}

// AppendTraditionalID appends i to the "traditional_id" field.
func (nuo *NCharacterUpdateOne) AppendTraditionalID(i []int) *NCharacterUpdateOne {
	nuo.mutation.AppendTraditionalID(i)
	return nuo
}

// SetIsKangXi sets the "is_kang_xi" field.
func (nuo *NCharacterUpdateOne) SetIsKangXi(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsKangXi(b)
	return nuo
}

// SetNillableIsKangXi sets the "is_kang_xi" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsKangXi(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsKangXi(*b)
	}
	return nuo
}

// SetKangXiID sets the "kang_xi_id" field.
func (nuo *NCharacterUpdateOne) SetKangXiID(i []int) *NCharacterUpdateOne {
	nuo.mutation.SetKangXiID(i)
	return nuo
}

// AppendKangXiID appends i to the "kang_xi_id" field.
func (nuo *NCharacterUpdateOne) AppendKangXiID(i []int) *NCharacterUpdateOne {
	nuo.mutation.AppendKangXiID(i)
	return nuo
}

// SetIsVariant sets the "is_variant" field.
func (nuo *NCharacterUpdateOne) SetIsVariant(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsVariant(b)
	return nuo
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsVariant(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsVariant(*b)
	}
	return nuo
}

// SetVariantID sets the "variant_id" field.
func (nuo *NCharacterUpdateOne) SetVariantID(i []int) *NCharacterUpdateOne {
	nuo.mutation.SetVariantID(i)
	return nuo
}

// AppendVariantID appends i to the "variant_id" field.
func (nuo *NCharacterUpdateOne) AppendVariantID(i []int) *NCharacterUpdateOne {
	nuo.mutation.AppendVariantID(i)
	return nuo
}

// SetIsScience sets the "is_science" field.
func (nuo *NCharacterUpdateOne) SetIsScience(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetIsScience(b)
	return nuo
}

// SetNillableIsScience sets the "is_science" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableIsScience(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetIsScience(*b)
	}
	return nuo
}

// SetScienceStroke sets the "science_stroke" field.
func (nuo *NCharacterUpdateOne) SetScienceStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.ResetScienceStroke()
	nuo.mutation.SetScienceStroke(i)
	return nuo
}

// SetNillableScienceStroke sets the "science_stroke" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableScienceStroke(i *int) *NCharacterUpdateOne {
	if i != nil {
		nuo.SetScienceStroke(*i)
	}
	return nuo
}

// AddScienceStroke adds i to the "science_stroke" field.
func (nuo *NCharacterUpdateOne) AddScienceStroke(i int) *NCharacterUpdateOne {
	nuo.mutation.AddScienceStroke(i)
	return nuo
}

// SetWuXing sets the "wu_xing" field.
func (nuo *NCharacterUpdateOne) SetWuXing(s string) *NCharacterUpdateOne {
	nuo.mutation.SetWuXing(s)
	return nuo
}

// SetNillableWuXing sets the "wu_xing" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableWuXing(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetWuXing(*s)
	}
	return nuo
}

// SetLucky sets the "lucky" field.
func (nuo *NCharacterUpdateOne) SetLucky(s string) *NCharacterUpdateOne {
	nuo.mutation.SetLucky(s)
	return nuo
}

// SetNillableLucky sets the "lucky" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableLucky(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetLucky(*s)
	}
	return nuo
}

// SetExplanation sets the "explanation" field.
func (nuo *NCharacterUpdateOne) SetExplanation(s string) *NCharacterUpdateOne {
	nuo.mutation.SetExplanation(s)
	return nuo
}

// SetNillableExplanation sets the "explanation" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableExplanation(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetExplanation(*s)
	}
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NCharacterUpdateOne) SetComment(s string) *NCharacterUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableComment(s *string) *NCharacterUpdateOne {
	if s != nil {
		nuo.SetComment(*s)
	}
	return nuo
}

// SetNeedFix sets the "need_fix" field.
func (nuo *NCharacterUpdateOne) SetNeedFix(b bool) *NCharacterUpdateOne {
	nuo.mutation.SetNeedFix(b)
	return nuo
}

// SetNillableNeedFix sets the "need_fix" field if the given value is not nil.
func (nuo *NCharacterUpdateOne) SetNillableNeedFix(b *bool) *NCharacterUpdateOne {
	if b != nil {
		nuo.SetNeedFix(*b)
	}
	return nuo
}

// Mutation returns the NCharacterMutation object of the builder.
func (nuo *NCharacterUpdateOne) Mutation() *NCharacterMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NCharacterUpdate builder.
func (nuo *NCharacterUpdateOne) Where(ps ...predicate.NCharacter) *NCharacterUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NCharacterUpdateOne) Select(field string, fields ...string) *NCharacterUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated NCharacter entity.
func (nuo *NCharacterUpdateOne) Save(ctx context.Context) (*NCharacter, error) {
	return withHooks[*NCharacter, NCharacterMutation](ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NCharacterUpdateOne) SaveX(ctx context.Context) *NCharacter {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NCharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NCharacterUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NCharacterUpdateOne) sqlSave(ctx context.Context) (_node *NCharacter, err error) {
	_spec := sqlgraph.NewUpdateSpec(ncharacter.Table, ncharacter.Columns, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NCharacter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ncharacter.FieldID)
		for _, f := range fields {
			if !ncharacter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ncharacter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedPinYin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldPinYin, value)
		})
	}
	if value, ok := nuo.mutation.Char(); ok {
		_spec.SetField(ncharacter.FieldChar, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CharStroke(); ok {
		_spec.SetField(ncharacter.FieldCharStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedCharStroke(); ok {
		_spec.AddField(ncharacter.FieldCharStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
	}
	if value, ok := nuo.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedRadicalStroke(); ok {
		_spec.AddField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.IsRegular(); ok {
		_spec.SetField(ncharacter.FieldIsRegular, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.IsSimplified(); ok {
		_spec.SetField(ncharacter.FieldIsSimplified, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.SimplifiedID(); ok {
		_spec.SetField(ncharacter.FieldSimplifiedID, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedSimplifiedID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldSimplifiedID, value)
		})
	}
	if value, ok := nuo.mutation.IsTraditional(); ok {
		_spec.SetField(ncharacter.FieldIsTraditional, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.TraditionalID(); ok {
		_spec.SetField(ncharacter.FieldTraditionalID, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedTraditionalID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldTraditionalID, value)
		})
	}
	if value, ok := nuo.mutation.IsKangXi(); ok {
		_spec.SetField(ncharacter.FieldIsKangXi, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.KangXiID(); ok {
		_spec.SetField(ncharacter.FieldKangXiID, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedKangXiID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldKangXiID, value)
		})
	}
	if value, ok := nuo.mutation.IsVariant(); ok {
		_spec.SetField(ncharacter.FieldIsVariant, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.VariantID(); ok {
		_spec.SetField(ncharacter.FieldVariantID, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedVariantID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ncharacter.FieldVariantID, value)
		})
	}
	if value, ok := nuo.mutation.IsScience(); ok {
		_spec.SetField(ncharacter.FieldIsScience, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.ScienceStroke(); ok {
		_spec.SetField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedScienceStroke(); ok {
		_spec.AddField(ncharacter.FieldScienceStroke, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Explanation(); ok {
		_spec.SetField(ncharacter.FieldExplanation, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
	}
	if value, ok := nuo.mutation.NeedFix(); ok {
		_spec.SetField(ncharacter.FieldNeedFix, field.TypeBool, value)
	}
	_node = &NCharacter{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ncharacter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
