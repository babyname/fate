// Code generated by ent, DO NOT EDIT.

package ent

func (cc *CharacterCreate) SetCharacter(input *Character) *CharacterCreate {
	cc.SetPinYin(input.PinYin)
	cc.SetCh(input.Ch)
	cc.SetRadical(input.Radical)
	cc.SetRadicalStroke(input.RadicalStroke)
	cc.SetStroke(input.Stroke)
	cc.SetIsKangXi(input.IsKangXi)
	cc.SetKangXi(input.KangXi)
	cc.SetKangXiStroke(input.KangXiStroke)
	cc.SetSimpleRadical(input.SimpleRadical)
	cc.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cc.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cc.SetTraditionalRadical(input.TraditionalRadical)
	cc.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cc.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cc.SetNameScience(input.NameScience)
	cc.SetWuXing(input.WuXing)
	cc.SetLucky(input.Lucky)
	cc.SetRegular(input.Regular)
	cc.SetTraditionalCharacter(input.TraditionalCharacter)
	cc.SetVariantCharacter(input.VariantCharacter)
	cc.SetComment(input.Comment)
	cc.SetScienceStroke(input.ScienceStroke)
	return cc
}

func (cc *CharacterCreate) SetCharacterWithOptional(input *Character) *CharacterCreate {
	cc.SetPinYin(input.PinYin)
	cc.SetCh(input.Ch)
	cc.SetRadical(input.Radical)
	cc.SetRadicalStroke(input.RadicalStroke)
	cc.SetStroke(input.Stroke)
	cc.SetIsKangXi(input.IsKangXi)
	cc.SetKangXi(input.KangXi)
	cc.SetKangXiStroke(input.KangXiStroke)
	cc.SetSimpleRadical(input.SimpleRadical)
	cc.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cc.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cc.SetTraditionalRadical(input.TraditionalRadical)
	cc.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cc.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cc.SetNameScience(input.NameScience)
	cc.SetWuXing(input.WuXing)
	cc.SetLucky(input.Lucky)
	cc.SetRegular(input.Regular)
	cc.SetTraditionalCharacter(input.TraditionalCharacter)
	cc.SetVariantCharacter(input.VariantCharacter)
	cc.SetComment(input.Comment)
	cc.SetScienceStroke(input.ScienceStroke)
	return cc
}

func (cuo *CharacterUpdateOne) SetCharacter(input *Character) *CharacterUpdateOne {
	cuo.SetPinYin(input.PinYin)
	cuo.SetCh(input.Ch)
	cuo.SetRadical(input.Radical)
	cuo.SetRadicalStroke(input.RadicalStroke)
	cuo.SetStroke(input.Stroke)
	cuo.SetIsKangXi(input.IsKangXi)
	cuo.SetKangXi(input.KangXi)
	cuo.SetKangXiStroke(input.KangXiStroke)
	cuo.SetSimpleRadical(input.SimpleRadical)
	cuo.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cuo.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cuo.SetTraditionalRadical(input.TraditionalRadical)
	cuo.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cuo.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cuo.SetNameScience(input.NameScience)
	cuo.SetWuXing(input.WuXing)
	cuo.SetLucky(input.Lucky)
	cuo.SetRegular(input.Regular)
	cuo.SetTraditionalCharacter(input.TraditionalCharacter)
	cuo.SetVariantCharacter(input.VariantCharacter)
	cuo.SetComment(input.Comment)
	cuo.SetScienceStroke(input.ScienceStroke)
	return cuo
}

func (cu *CharacterUpdate) SetCharacter(input *Character) *CharacterUpdate {
	cu.SetPinYin(input.PinYin)
	cu.SetCh(input.Ch)
	cu.SetRadical(input.Radical)
	cu.SetRadicalStroke(input.RadicalStroke)
	cu.SetStroke(input.Stroke)
	cu.SetIsKangXi(input.IsKangXi)
	cu.SetKangXi(input.KangXi)
	cu.SetKangXiStroke(input.KangXiStroke)
	cu.SetSimpleRadical(input.SimpleRadical)
	cu.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cu.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cu.SetTraditionalRadical(input.TraditionalRadical)
	cu.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cu.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cu.SetNameScience(input.NameScience)
	cu.SetWuXing(input.WuXing)
	cu.SetLucky(input.Lucky)
	cu.SetRegular(input.Regular)
	cu.SetTraditionalCharacter(input.TraditionalCharacter)
	cu.SetVariantCharacter(input.VariantCharacter)
	cu.SetComment(input.Comment)
	cu.SetScienceStroke(input.ScienceStroke)
	return cu
}

func (cu *CharacterUpdate) SetCharacterWithOptional(input *Character) *CharacterUpdate {
	cu.SetPinYin(input.PinYin)
	cu.SetCh(input.Ch)
	cu.SetRadical(input.Radical)
	cu.SetRadicalStroke(input.RadicalStroke)
	cu.SetStroke(input.Stroke)
	cu.SetIsKangXi(input.IsKangXi)
	cu.SetKangXi(input.KangXi)
	cu.SetKangXiStroke(input.KangXiStroke)
	cu.SetSimpleRadical(input.SimpleRadical)
	cu.SetSimpleRadicalStroke(input.SimpleRadicalStroke)
	cu.SetSimpleTotalStroke(input.SimpleTotalStroke)
	cu.SetTraditionalRadical(input.TraditionalRadical)
	cu.SetTraditionalRadicalStroke(input.TraditionalRadicalStroke)
	cu.SetTraditionalTotalStroke(input.TraditionalTotalStroke)
	cu.SetNameScience(input.NameScience)
	cu.SetWuXing(input.WuXing)
	cu.SetLucky(input.Lucky)
	cu.SetRegular(input.Regular)
	cu.SetTraditionalCharacter(input.TraditionalCharacter)
	cu.SetVariantCharacter(input.VariantCharacter)
	cu.SetComment(input.Comment)
	cu.SetScienceStroke(input.ScienceStroke)
	return cu
}

func (ic *IdiomCreate) SetIdiom(input *Idiom) *IdiomCreate {
	ic.SetPinYin(input.PinYin)
	ic.SetWord(input.Word)
	ic.SetDerivation(input.Derivation)
	ic.SetExplanation(input.Explanation)
	ic.SetAbbreviation(input.Abbreviation)
	ic.SetExample(input.Example)
	ic.SetComment(input.Comment)
	return ic
}

func (ic *IdiomCreate) SetIdiomWithOptional(input *Idiom) *IdiomCreate {
	ic.SetPinYin(input.PinYin)
	ic.SetWord(input.Word)
	ic.SetDerivation(input.Derivation)
	ic.SetExplanation(input.Explanation)
	ic.SetAbbreviation(input.Abbreviation)
	ic.SetExample(input.Example)
	ic.SetComment(input.Comment)
	return ic
}

func (iuo *IdiomUpdateOne) SetIdiom(input *Idiom) *IdiomUpdateOne {
	iuo.SetPinYin(input.PinYin)
	iuo.SetWord(input.Word)
	iuo.SetDerivation(input.Derivation)
	iuo.SetExplanation(input.Explanation)
	iuo.SetAbbreviation(input.Abbreviation)
	iuo.SetExample(input.Example)
	iuo.SetComment(input.Comment)
	return iuo
}

func (iu *IdiomUpdate) SetIdiom(input *Idiom) *IdiomUpdate {
	iu.SetPinYin(input.PinYin)
	iu.SetWord(input.Word)
	iu.SetDerivation(input.Derivation)
	iu.SetExplanation(input.Explanation)
	iu.SetAbbreviation(input.Abbreviation)
	iu.SetExample(input.Example)
	iu.SetComment(input.Comment)
	return iu
}

func (iu *IdiomUpdate) SetIdiomWithOptional(input *Idiom) *IdiomUpdate {
	iu.SetPinYin(input.PinYin)
	iu.SetWord(input.Word)
	iu.SetDerivation(input.Derivation)
	iu.SetExplanation(input.Explanation)
	iu.SetAbbreviation(input.Abbreviation)
	iu.SetExample(input.Example)
	iu.SetComment(input.Comment)
	return iu
}

func (nc *NCharacterCreate) SetNCharacter(input *NCharacter) *NCharacterCreate {
	nc.SetPinYin(input.PinYin)
	nc.SetChar(input.Char)
	nc.SetCharStroke(input.CharStroke)
	nc.SetRadical(input.Radical)
	nc.SetRadicalStroke(input.RadicalStroke)
	nc.SetIsRegular(input.IsRegular)
	nc.SetIsSimplified(input.IsSimplified)
	nc.SetSimplifiedID(input.SimplifiedID)
	nc.SetIsTraditional(input.IsTraditional)
	nc.SetTraditionalID(input.TraditionalID)
	nc.SetIsKangXi(input.IsKangXi)
	nc.SetKangXiID(input.KangXiID)
	nc.SetIsVariant(input.IsVariant)
	nc.SetVariantID(input.VariantID)
	nc.SetIsScience(input.IsScience)
	nc.SetScienceStroke(input.ScienceStroke)
	nc.SetWuXing(input.WuXing)
	nc.SetLucky(input.Lucky)
	nc.SetExplanation(input.Explanation)
	nc.SetComment(input.Comment)
	nc.SetNeedFix(input.NeedFix)
	return nc
}

func (nc *NCharacterCreate) SetNCharacterWithOptional(input *NCharacter) *NCharacterCreate {
	nc.SetPinYin(input.PinYin)
	nc.SetChar(input.Char)
	nc.SetCharStroke(input.CharStroke)
	nc.SetRadical(input.Radical)
	nc.SetRadicalStroke(input.RadicalStroke)
	nc.SetIsRegular(input.IsRegular)
	nc.SetIsSimplified(input.IsSimplified)
	nc.SetSimplifiedID(input.SimplifiedID)
	nc.SetIsTraditional(input.IsTraditional)
	nc.SetTraditionalID(input.TraditionalID)
	nc.SetIsKangXi(input.IsKangXi)
	nc.SetKangXiID(input.KangXiID)
	nc.SetIsVariant(input.IsVariant)
	nc.SetVariantID(input.VariantID)
	nc.SetIsScience(input.IsScience)
	nc.SetScienceStroke(input.ScienceStroke)
	nc.SetWuXing(input.WuXing)
	nc.SetLucky(input.Lucky)
	nc.SetExplanation(input.Explanation)
	nc.SetComment(input.Comment)
	nc.SetNeedFix(input.NeedFix)
	return nc
}

func (nuo *NCharacterUpdateOne) SetNCharacter(input *NCharacter) *NCharacterUpdateOne {
	nuo.SetPinYin(input.PinYin)
	nuo.SetChar(input.Char)
	nuo.SetCharStroke(input.CharStroke)
	nuo.SetRadical(input.Radical)
	nuo.SetRadicalStroke(input.RadicalStroke)
	nuo.SetIsRegular(input.IsRegular)
	nuo.SetIsSimplified(input.IsSimplified)
	nuo.SetSimplifiedID(input.SimplifiedID)
	nuo.SetIsTraditional(input.IsTraditional)
	nuo.SetTraditionalID(input.TraditionalID)
	nuo.SetIsKangXi(input.IsKangXi)
	nuo.SetKangXiID(input.KangXiID)
	nuo.SetIsVariant(input.IsVariant)
	nuo.SetVariantID(input.VariantID)
	nuo.SetIsScience(input.IsScience)
	nuo.SetScienceStroke(input.ScienceStroke)
	nuo.SetWuXing(input.WuXing)
	nuo.SetLucky(input.Lucky)
	nuo.SetExplanation(input.Explanation)
	nuo.SetComment(input.Comment)
	nuo.SetNeedFix(input.NeedFix)
	return nuo
}

func (nu *NCharacterUpdate) SetNCharacter(input *NCharacter) *NCharacterUpdate {
	nu.SetPinYin(input.PinYin)
	nu.SetChar(input.Char)
	nu.SetCharStroke(input.CharStroke)
	nu.SetRadical(input.Radical)
	nu.SetRadicalStroke(input.RadicalStroke)
	nu.SetIsRegular(input.IsRegular)
	nu.SetIsSimplified(input.IsSimplified)
	nu.SetSimplifiedID(input.SimplifiedID)
	nu.SetIsTraditional(input.IsTraditional)
	nu.SetTraditionalID(input.TraditionalID)
	nu.SetIsKangXi(input.IsKangXi)
	nu.SetKangXiID(input.KangXiID)
	nu.SetIsVariant(input.IsVariant)
	nu.SetVariantID(input.VariantID)
	nu.SetIsScience(input.IsScience)
	nu.SetScienceStroke(input.ScienceStroke)
	nu.SetWuXing(input.WuXing)
	nu.SetLucky(input.Lucky)
	nu.SetExplanation(input.Explanation)
	nu.SetComment(input.Comment)
	nu.SetNeedFix(input.NeedFix)
	return nu
}

func (nu *NCharacterUpdate) SetNCharacterWithOptional(input *NCharacter) *NCharacterUpdate {
	nu.SetPinYin(input.PinYin)
	nu.SetChar(input.Char)
	nu.SetCharStroke(input.CharStroke)
	nu.SetRadical(input.Radical)
	nu.SetRadicalStroke(input.RadicalStroke)
	nu.SetIsRegular(input.IsRegular)
	nu.SetIsSimplified(input.IsSimplified)
	nu.SetSimplifiedID(input.SimplifiedID)
	nu.SetIsTraditional(input.IsTraditional)
	nu.SetTraditionalID(input.TraditionalID)
	nu.SetIsKangXi(input.IsKangXi)
	nu.SetKangXiID(input.KangXiID)
	nu.SetIsVariant(input.IsVariant)
	nu.SetVariantID(input.VariantID)
	nu.SetIsScience(input.IsScience)
	nu.SetScienceStroke(input.ScienceStroke)
	nu.SetWuXing(input.WuXing)
	nu.SetLucky(input.Lucky)
	nu.SetExplanation(input.Explanation)
	nu.SetComment(input.Comment)
	nu.SetNeedFix(input.NeedFix)
	return nu
}

func (vc *VersionCreate) SetVersion(input *Version) *VersionCreate {
	vc.SetCurrentVersion(input.CurrentVersion)
	vc.SetUpdatedUnix(input.UpdatedUnix)
	return vc
}

func (vc *VersionCreate) SetVersionWithOptional(input *Version) *VersionCreate {
	vc.SetCurrentVersion(input.CurrentVersion)
	vc.SetUpdatedUnix(input.UpdatedUnix)
	return vc
}

func (vuo *VersionUpdateOne) SetVersion(input *Version) *VersionUpdateOne {
	vuo.SetCurrentVersion(input.CurrentVersion)
	vuo.SetUpdatedUnix(input.UpdatedUnix)
	return vuo
}

func (vu *VersionUpdate) SetVersion(input *Version) *VersionUpdate {
	vu.SetCurrentVersion(input.CurrentVersion)
	vu.SetUpdatedUnix(input.UpdatedUnix)
	return vu
}

func (vu *VersionUpdate) SetVersionWithOptional(input *Version) *VersionUpdate {
	vu.SetCurrentVersion(input.CurrentVersion)
	vu.SetUpdatedUnix(input.UpdatedUnix)
	return vu
}

func (wglc *WuGeLuckyCreate) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyCreate {
	wglc.SetLastStroke1(input.LastStroke1)
	wglc.SetLastStroke2(input.LastStroke2)
	wglc.SetFirstStroke1(input.FirstStroke1)
	wglc.SetFirstStroke2(input.FirstStroke2)
	wglc.SetTianGe(input.TianGe)
	wglc.SetTianDaYan(input.TianDaYan)
	wglc.SetRenGe(input.RenGe)
	wglc.SetRenDaYan(input.RenDaYan)
	wglc.SetDiGe(input.DiGe)
	wglc.SetDiDaYan(input.DiDaYan)
	wglc.SetWaiGe(input.WaiGe)
	wglc.SetWaiDaYan(input.WaiDaYan)
	wglc.SetZongGe(input.ZongGe)
	wglc.SetZongDaYan(input.ZongDaYan)
	wglc.SetZongLucky(input.ZongLucky)
	wglc.SetZongSex(input.ZongSex)
	wglc.SetZongMax(input.ZongMax)
	return wglc
}

func (wglc *WuGeLuckyCreate) SetWuGeLuckyWithOptional(input *WuGeLucky) *WuGeLuckyCreate {
	wglc.SetLastStroke1(input.LastStroke1)
	wglc.SetLastStroke2(input.LastStroke2)
	wglc.SetFirstStroke1(input.FirstStroke1)
	wglc.SetFirstStroke2(input.FirstStroke2)
	wglc.SetTianGe(input.TianGe)
	wglc.SetTianDaYan(input.TianDaYan)
	wglc.SetRenGe(input.RenGe)
	wglc.SetRenDaYan(input.RenDaYan)
	wglc.SetDiGe(input.DiGe)
	wglc.SetDiDaYan(input.DiDaYan)
	wglc.SetWaiGe(input.WaiGe)
	wglc.SetWaiDaYan(input.WaiDaYan)
	wglc.SetZongGe(input.ZongGe)
	wglc.SetZongDaYan(input.ZongDaYan)
	wglc.SetZongLucky(input.ZongLucky)
	wglc.SetZongSex(input.ZongSex)
	wglc.SetZongMax(input.ZongMax)
	return wglc
}

func (wgluo *WuGeLuckyUpdateOne) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyUpdateOne {
	wgluo.SetLastStroke1(input.LastStroke1)
	wgluo.SetLastStroke2(input.LastStroke2)
	wgluo.SetFirstStroke1(input.FirstStroke1)
	wgluo.SetFirstStroke2(input.FirstStroke2)
	wgluo.SetTianGe(input.TianGe)
	wgluo.SetTianDaYan(input.TianDaYan)
	wgluo.SetRenGe(input.RenGe)
	wgluo.SetRenDaYan(input.RenDaYan)
	wgluo.SetDiGe(input.DiGe)
	wgluo.SetDiDaYan(input.DiDaYan)
	wgluo.SetWaiGe(input.WaiGe)
	wgluo.SetWaiDaYan(input.WaiDaYan)
	wgluo.SetZongGe(input.ZongGe)
	wgluo.SetZongDaYan(input.ZongDaYan)
	wgluo.SetZongLucky(input.ZongLucky)
	wgluo.SetZongSex(input.ZongSex)
	wgluo.SetZongMax(input.ZongMax)
	return wgluo
}

func (wglu *WuGeLuckyUpdate) SetWuGeLucky(input *WuGeLucky) *WuGeLuckyUpdate {
	wglu.SetLastStroke1(input.LastStroke1)
	wglu.SetLastStroke2(input.LastStroke2)
	wglu.SetFirstStroke1(input.FirstStroke1)
	wglu.SetFirstStroke2(input.FirstStroke2)
	wglu.SetTianGe(input.TianGe)
	wglu.SetTianDaYan(input.TianDaYan)
	wglu.SetRenGe(input.RenGe)
	wglu.SetRenDaYan(input.RenDaYan)
	wglu.SetDiGe(input.DiGe)
	wglu.SetDiDaYan(input.DiDaYan)
	wglu.SetWaiGe(input.WaiGe)
	wglu.SetWaiDaYan(input.WaiDaYan)
	wglu.SetZongGe(input.ZongGe)
	wglu.SetZongDaYan(input.ZongDaYan)
	wglu.SetZongLucky(input.ZongLucky)
	wglu.SetZongSex(input.ZongSex)
	wglu.SetZongMax(input.ZongMax)
	return wglu
}

func (wglu *WuGeLuckyUpdate) SetWuGeLuckyWithOptional(input *WuGeLucky) *WuGeLuckyUpdate {
	wglu.SetLastStroke1(input.LastStroke1)
	wglu.SetLastStroke2(input.LastStroke2)
	wglu.SetFirstStroke1(input.FirstStroke1)
	wglu.SetFirstStroke2(input.FirstStroke2)
	wglu.SetTianGe(input.TianGe)
	wglu.SetTianDaYan(input.TianDaYan)
	wglu.SetRenGe(input.RenGe)
	wglu.SetRenDaYan(input.RenDaYan)
	wglu.SetDiGe(input.DiGe)
	wglu.SetDiDaYan(input.DiDaYan)
	wglu.SetWaiGe(input.WaiGe)
	wglu.SetWaiDaYan(input.WaiDaYan)
	wglu.SetZongGe(input.ZongGe)
	wglu.SetZongDaYan(input.ZongDaYan)
	wglu.SetZongLucky(input.ZongLucky)
	wglu.SetZongSex(input.ZongSex)
	wglu.SetZongMax(input.ZongMax)
	return wglu
}

func (wxc *WuXingCreate) SetWuXing(input *WuXing) *WuXingCreate {
	return wxc
}

func (wxc *WuXingCreate) SetWuXingWithOptional(input *WuXing) *WuXingCreate {
	wxc.SetCreated(input.Created)
	wxc.SetUpdated(input.Updated)
	wxc.SetDeleted(input.Deleted)
	wxc.SetVersion(input.Version)
	wxc.SetFirst(input.First)
	wxc.SetSecond(input.Second)
	wxc.SetThird(input.Third)
	wxc.SetFortune(input.Fortune)
	return wxc
}

func (wxuo *WuXingUpdateOne) SetWuXing(input *WuXing) *WuXingUpdateOne {
	return wxuo
}

func (wxu *WuXingUpdate) SetWuXing(input *WuXing) *WuXingUpdate {
	return wxu
}

func (wxu *WuXingUpdate) SetWuXingWithOptional(input *WuXing) *WuXingUpdate {
	wxu.SetCreated(input.Created)
	wxu.SetUpdated(input.Updated)
	wxu.SetDeleted(input.Deleted)
	wxu.SetVersion(input.Version)
	wxu.SetFirst(input.First)
	wxu.SetSecond(input.Second)
	wxu.SetThird(input.Third)
	wxu.SetFortune(input.Fortune)
	return wxu
}
