// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/ncharacter"
)

// NCharacter is the model entity for the NCharacter schema.
type NCharacter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PinYin holds the value of the "pin_yin" field.
	PinYin []string `json:"pin_yin,omitempty"`
	// Char holds the value of the "char" field.
	Char string `json:"char,omitempty"`
	// CharStroke holds the value of the "char_stroke" field.
	CharStroke int `json:"char_stroke,omitempty"`
	// Radical holds the value of the "radical" field.
	Radical string `json:"radical,omitempty"`
	// RadicalStroke holds the value of the "radical_stroke" field.
	RadicalStroke int `json:"radical_stroke,omitempty"`
	// IsRegular holds the value of the "is_regular" field.
	IsRegular bool `json:"is_regular,omitempty"`
	// IsSimplified holds the value of the "is_simplified" field.
	IsSimplified bool `json:"is_simplified,omitempty"`
	// SimplifiedID holds the value of the "simplified_id" field.
	SimplifiedID []int `json:"simplified_id,omitempty"`
	// IsTraditional holds the value of the "is_traditional" field.
	IsTraditional bool `json:"is_traditional,omitempty"`
	// TraditionalID holds the value of the "traditional_id" field.
	TraditionalID []int `json:"traditional_id,omitempty"`
	// IsKangXi holds the value of the "is_kang_xi" field.
	IsKangXi bool `json:"is_kang_xi,omitempty"`
	// KangXiID holds the value of the "kang_xi_id" field.
	KangXiID []int `json:"kang_xi_id,omitempty"`
	// IsVariant holds the value of the "is_variant" field.
	IsVariant bool `json:"is_variant,omitempty"`
	// VariantID holds the value of the "variant_id" field.
	VariantID []int `json:"variant_id,omitempty"`
	// IsScience holds the value of the "is_science" field.
	IsScience bool `json:"is_science,omitempty"`
	// ScienceStroke holds the value of the "science_stroke" field.
	ScienceStroke int `json:"science_stroke,omitempty"`
	// WuXing holds the value of the "wu_xing" field.
	WuXing string `json:"wu_xing,omitempty"`
	// Lucky holds the value of the "lucky" field.
	Lucky string `json:"lucky,omitempty"`
	// Explanation holds the value of the "explanation" field.
	Explanation string `json:"explanation,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// NeedFix holds the value of the "need_fix" field.
	NeedFix bool `json:"need_fix,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NCharacter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ncharacter.FieldPinYin, ncharacter.FieldSimplifiedID, ncharacter.FieldTraditionalID, ncharacter.FieldKangXiID, ncharacter.FieldVariantID:
			values[i] = new([]byte)
		case ncharacter.FieldIsRegular, ncharacter.FieldIsSimplified, ncharacter.FieldIsTraditional, ncharacter.FieldIsKangXi, ncharacter.FieldIsVariant, ncharacter.FieldIsScience, ncharacter.FieldNeedFix:
			values[i] = new(sql.NullBool)
		case ncharacter.FieldID, ncharacter.FieldCharStroke, ncharacter.FieldRadicalStroke, ncharacter.FieldScienceStroke:
			values[i] = new(sql.NullInt64)
		case ncharacter.FieldChar, ncharacter.FieldRadical, ncharacter.FieldWuXing, ncharacter.FieldLucky, ncharacter.FieldExplanation, ncharacter.FieldComment:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NCharacter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NCharacter fields.
func (n *NCharacter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ncharacter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case ncharacter.FieldPinYin:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pin_yin", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.PinYin); err != nil {
					return fmt.Errorf("unmarshal field pin_yin: %w", err)
				}
			}
		case ncharacter.FieldChar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field char", values[i])
			} else if value.Valid {
				n.Char = value.String
			}
		case ncharacter.FieldCharStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field char_stroke", values[i])
			} else if value.Valid {
				n.CharStroke = int(value.Int64)
			}
		case ncharacter.FieldRadical:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field radical", values[i])
			} else if value.Valid {
				n.Radical = value.String
			}
		case ncharacter.FieldRadicalStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field radical_stroke", values[i])
			} else if value.Valid {
				n.RadicalStroke = int(value.Int64)
			}
		case ncharacter.FieldIsRegular:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_regular", values[i])
			} else if value.Valid {
				n.IsRegular = value.Bool
			}
		case ncharacter.FieldIsSimplified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_simplified", values[i])
			} else if value.Valid {
				n.IsSimplified = value.Bool
			}
		case ncharacter.FieldSimplifiedID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field simplified_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.SimplifiedID); err != nil {
					return fmt.Errorf("unmarshal field simplified_id: %w", err)
				}
			}
		case ncharacter.FieldIsTraditional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_traditional", values[i])
			} else if value.Valid {
				n.IsTraditional = value.Bool
			}
		case ncharacter.FieldTraditionalID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field traditional_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.TraditionalID); err != nil {
					return fmt.Errorf("unmarshal field traditional_id: %w", err)
				}
			}
		case ncharacter.FieldIsKangXi:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_kang_xi", values[i])
			} else if value.Valid {
				n.IsKangXi = value.Bool
			}
		case ncharacter.FieldKangXiID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field kang_xi_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.KangXiID); err != nil {
					return fmt.Errorf("unmarshal field kang_xi_id: %w", err)
				}
			}
		case ncharacter.FieldIsVariant:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_variant", values[i])
			} else if value.Valid {
				n.IsVariant = value.Bool
			}
		case ncharacter.FieldVariantID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variant_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.VariantID); err != nil {
					return fmt.Errorf("unmarshal field variant_id: %w", err)
				}
			}
		case ncharacter.FieldIsScience:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_science", values[i])
			} else if value.Valid {
				n.IsScience = value.Bool
			}
		case ncharacter.FieldScienceStroke:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field science_stroke", values[i])
			} else if value.Valid {
				n.ScienceStroke = int(value.Int64)
			}
		case ncharacter.FieldWuXing:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wu_xing", values[i])
			} else if value.Valid {
				n.WuXing = value.String
			}
		case ncharacter.FieldLucky:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lucky", values[i])
			} else if value.Valid {
				n.Lucky = value.String
			}
		case ncharacter.FieldExplanation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field explanation", values[i])
			} else if value.Valid {
				n.Explanation = value.String
			}
		case ncharacter.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				n.Comment = value.String
			}
		case ncharacter.FieldNeedFix:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field need_fix", values[i])
			} else if value.Valid {
				n.NeedFix = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NCharacter.
// Note that you need to call NCharacter.Unwrap() before calling this method if this NCharacter
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *NCharacter) Update() *NCharacterUpdateOne {
	return NewNCharacterClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the NCharacter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *NCharacter) Unwrap() *NCharacter {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: NCharacter is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *NCharacter) String() string {
	var builder strings.Builder
	builder.WriteString("NCharacter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("pin_yin=")
	builder.WriteString(fmt.Sprintf("%v", n.PinYin))
	builder.WriteString(", ")
	builder.WriteString("char=")
	builder.WriteString(n.Char)
	builder.WriteString(", ")
	builder.WriteString("char_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.CharStroke))
	builder.WriteString(", ")
	builder.WriteString("radical=")
	builder.WriteString(n.Radical)
	builder.WriteString(", ")
	builder.WriteString("radical_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.RadicalStroke))
	builder.WriteString(", ")
	builder.WriteString("is_regular=")
	builder.WriteString(fmt.Sprintf("%v", n.IsRegular))
	builder.WriteString(", ")
	builder.WriteString("is_simplified=")
	builder.WriteString(fmt.Sprintf("%v", n.IsSimplified))
	builder.WriteString(", ")
	builder.WriteString("simplified_id=")
	builder.WriteString(fmt.Sprintf("%v", n.SimplifiedID))
	builder.WriteString(", ")
	builder.WriteString("is_traditional=")
	builder.WriteString(fmt.Sprintf("%v", n.IsTraditional))
	builder.WriteString(", ")
	builder.WriteString("traditional_id=")
	builder.WriteString(fmt.Sprintf("%v", n.TraditionalID))
	builder.WriteString(", ")
	builder.WriteString("is_kang_xi=")
	builder.WriteString(fmt.Sprintf("%v", n.IsKangXi))
	builder.WriteString(", ")
	builder.WriteString("kang_xi_id=")
	builder.WriteString(fmt.Sprintf("%v", n.KangXiID))
	builder.WriteString(", ")
	builder.WriteString("is_variant=")
	builder.WriteString(fmt.Sprintf("%v", n.IsVariant))
	builder.WriteString(", ")
	builder.WriteString("variant_id=")
	builder.WriteString(fmt.Sprintf("%v", n.VariantID))
	builder.WriteString(", ")
	builder.WriteString("is_science=")
	builder.WriteString(fmt.Sprintf("%v", n.IsScience))
	builder.WriteString(", ")
	builder.WriteString("science_stroke=")
	builder.WriteString(fmt.Sprintf("%v", n.ScienceStroke))
	builder.WriteString(", ")
	builder.WriteString("wu_xing=")
	builder.WriteString(n.WuXing)
	builder.WriteString(", ")
	builder.WriteString("lucky=")
	builder.WriteString(n.Lucky)
	builder.WriteString(", ")
	builder.WriteString("explanation=")
	builder.WriteString(n.Explanation)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(n.Comment)
	builder.WriteString(", ")
	builder.WriteString("need_fix=")
	builder.WriteString(fmt.Sprintf("%v", n.NeedFix))
	builder.WriteByte(')')
	return builder.String()
}

// NCharacters is a parsable slice of NCharacter.
type NCharacters []*NCharacter
