// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/ncharacter"
)

// NCharacterCreate is the builder for creating a NCharacter entity.
type NCharacterCreate struct {
	config
	mutation *NCharacterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPinYin sets the "pin_yin" field.
func (nc *NCharacterCreate) SetPinYin(s []string) *NCharacterCreate {
	nc.mutation.SetPinYin(s)
	return nc
}

// SetChar sets the "char" field.
func (nc *NCharacterCreate) SetChar(s string) *NCharacterCreate {
	nc.mutation.SetChar(s)
	return nc
}

// SetNillableChar sets the "char" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableChar(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetChar(*s)
	}
	return nc
}

// SetCharStroke sets the "char_stroke" field.
func (nc *NCharacterCreate) SetCharStroke(i int) *NCharacterCreate {
	nc.mutation.SetCharStroke(i)
	return nc
}

// SetNillableCharStroke sets the "char_stroke" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableCharStroke(i *int) *NCharacterCreate {
	if i != nil {
		nc.SetCharStroke(*i)
	}
	return nc
}

// SetRadical sets the "radical" field.
func (nc *NCharacterCreate) SetRadical(s string) *NCharacterCreate {
	nc.mutation.SetRadical(s)
	return nc
}

// SetNillableRadical sets the "radical" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableRadical(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetRadical(*s)
	}
	return nc
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nc *NCharacterCreate) SetRadicalStroke(i int) *NCharacterCreate {
	nc.mutation.SetRadicalStroke(i)
	return nc
}

// SetNillableRadicalStroke sets the "radical_stroke" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableRadicalStroke(i *int) *NCharacterCreate {
	if i != nil {
		nc.SetRadicalStroke(*i)
	}
	return nc
}

// SetIsRegular sets the "is_regular" field.
func (nc *NCharacterCreate) SetIsRegular(b bool) *NCharacterCreate {
	nc.mutation.SetIsRegular(b)
	return nc
}

// SetNillableIsRegular sets the "is_regular" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsRegular(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsRegular(*b)
	}
	return nc
}

// SetIsSimplified sets the "is_simplified" field.
func (nc *NCharacterCreate) SetIsSimplified(b bool) *NCharacterCreate {
	nc.mutation.SetIsSimplified(b)
	return nc
}

// SetNillableIsSimplified sets the "is_simplified" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsSimplified(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsSimplified(*b)
	}
	return nc
}

// SetSimplifiedID sets the "simplified_id" field.
func (nc *NCharacterCreate) SetSimplifiedID(i []int) *NCharacterCreate {
	nc.mutation.SetSimplifiedID(i)
	return nc
}

// SetIsTraditional sets the "is_traditional" field.
func (nc *NCharacterCreate) SetIsTraditional(b bool) *NCharacterCreate {
	nc.mutation.SetIsTraditional(b)
	return nc
}

// SetNillableIsTraditional sets the "is_traditional" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsTraditional(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsTraditional(*b)
	}
	return nc
}

// SetTraditionalID sets the "traditional_id" field.
func (nc *NCharacterCreate) SetTraditionalID(i []int) *NCharacterCreate {
	nc.mutation.SetTraditionalID(i)
	return nc
}

// SetIsKangXi sets the "is_kang_xi" field.
func (nc *NCharacterCreate) SetIsKangXi(b bool) *NCharacterCreate {
	nc.mutation.SetIsKangXi(b)
	return nc
}

// SetNillableIsKangXi sets the "is_kang_xi" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsKangXi(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsKangXi(*b)
	}
	return nc
}

// SetKangXiID sets the "kang_xi_id" field.
func (nc *NCharacterCreate) SetKangXiID(i []int) *NCharacterCreate {
	nc.mutation.SetKangXiID(i)
	return nc
}

// SetIsVariant sets the "is_variant" field.
func (nc *NCharacterCreate) SetIsVariant(b bool) *NCharacterCreate {
	nc.mutation.SetIsVariant(b)
	return nc
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsVariant(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsVariant(*b)
	}
	return nc
}

// SetVariantID sets the "variant_id" field.
func (nc *NCharacterCreate) SetVariantID(i []int) *NCharacterCreate {
	nc.mutation.SetVariantID(i)
	return nc
}

// SetIsScience sets the "is_science" field.
func (nc *NCharacterCreate) SetIsScience(b bool) *NCharacterCreate {
	nc.mutation.SetIsScience(b)
	return nc
}

// SetNillableIsScience sets the "is_science" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableIsScience(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetIsScience(*b)
	}
	return nc
}

// SetScienceStroke sets the "science_stroke" field.
func (nc *NCharacterCreate) SetScienceStroke(i int) *NCharacterCreate {
	nc.mutation.SetScienceStroke(i)
	return nc
}

// SetNillableScienceStroke sets the "science_stroke" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableScienceStroke(i *int) *NCharacterCreate {
	if i != nil {
		nc.SetScienceStroke(*i)
	}
	return nc
}

// SetWuXing sets the "wu_xing" field.
func (nc *NCharacterCreate) SetWuXing(s string) *NCharacterCreate {
	nc.mutation.SetWuXing(s)
	return nc
}

// SetNillableWuXing sets the "wu_xing" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableWuXing(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetWuXing(*s)
	}
	return nc
}

// SetLucky sets the "lucky" field.
func (nc *NCharacterCreate) SetLucky(s string) *NCharacterCreate {
	nc.mutation.SetLucky(s)
	return nc
}

// SetNillableLucky sets the "lucky" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableLucky(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetLucky(*s)
	}
	return nc
}

// SetExplanation sets the "explanation" field.
func (nc *NCharacterCreate) SetExplanation(s string) *NCharacterCreate {
	nc.mutation.SetExplanation(s)
	return nc
}

// SetNillableExplanation sets the "explanation" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableExplanation(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetExplanation(*s)
	}
	return nc
}

// SetComment sets the "comment" field.
func (nc *NCharacterCreate) SetComment(s string) *NCharacterCreate {
	nc.mutation.SetComment(s)
	return nc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableComment(s *string) *NCharacterCreate {
	if s != nil {
		nc.SetComment(*s)
	}
	return nc
}

// SetNeedFix sets the "need_fix" field.
func (nc *NCharacterCreate) SetNeedFix(b bool) *NCharacterCreate {
	nc.mutation.SetNeedFix(b)
	return nc
}

// SetNillableNeedFix sets the "need_fix" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableNeedFix(b *bool) *NCharacterCreate {
	if b != nil {
		nc.SetNeedFix(*b)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NCharacterCreate) SetID(i int) *NCharacterCreate {
	nc.mutation.SetID(i)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableID(i *int) *NCharacterCreate {
	if i != nil {
		nc.SetID(*i)
	}
	return nc
}

// Mutation returns the NCharacterMutation object of the builder.
func (nc *NCharacterCreate) Mutation() *NCharacterMutation {
	return nc.mutation
}

// Save creates the NCharacter in the database.
func (nc *NCharacterCreate) Save(ctx context.Context) (*NCharacter, error) {
	nc.defaults()
	return withHooks[*NCharacter, NCharacterMutation](ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NCharacterCreate) SaveX(ctx context.Context) *NCharacter {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NCharacterCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NCharacterCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NCharacterCreate) defaults() {
	if _, ok := nc.mutation.PinYin(); !ok {
		v := ncharacter.DefaultPinYin
		nc.mutation.SetPinYin(v)
	}
	if _, ok := nc.mutation.Char(); !ok {
		v := ncharacter.DefaultChar
		nc.mutation.SetChar(v)
	}
	if _, ok := nc.mutation.CharStroke(); !ok {
		v := ncharacter.DefaultCharStroke
		nc.mutation.SetCharStroke(v)
	}
	if _, ok := nc.mutation.Radical(); !ok {
		v := ncharacter.DefaultRadical
		nc.mutation.SetRadical(v)
	}
	if _, ok := nc.mutation.RadicalStroke(); !ok {
		v := ncharacter.DefaultRadicalStroke
		nc.mutation.SetRadicalStroke(v)
	}
	if _, ok := nc.mutation.IsRegular(); !ok {
		v := ncharacter.DefaultIsRegular
		nc.mutation.SetIsRegular(v)
	}
	if _, ok := nc.mutation.IsSimplified(); !ok {
		v := ncharacter.DefaultIsSimplified
		nc.mutation.SetIsSimplified(v)
	}
	if _, ok := nc.mutation.SimplifiedID(); !ok {
		v := ncharacter.DefaultSimplifiedID
		nc.mutation.SetSimplifiedID(v)
	}
	if _, ok := nc.mutation.IsTraditional(); !ok {
		v := ncharacter.DefaultIsTraditional
		nc.mutation.SetIsTraditional(v)
	}
	if _, ok := nc.mutation.TraditionalID(); !ok {
		v := ncharacter.DefaultTraditionalID
		nc.mutation.SetTraditionalID(v)
	}
	if _, ok := nc.mutation.IsKangXi(); !ok {
		v := ncharacter.DefaultIsKangXi
		nc.mutation.SetIsKangXi(v)
	}
	if _, ok := nc.mutation.KangXiID(); !ok {
		v := ncharacter.DefaultKangXiID
		nc.mutation.SetKangXiID(v)
	}
	if _, ok := nc.mutation.IsVariant(); !ok {
		v := ncharacter.DefaultIsVariant
		nc.mutation.SetIsVariant(v)
	}
	if _, ok := nc.mutation.VariantID(); !ok {
		v := ncharacter.DefaultVariantID
		nc.mutation.SetVariantID(v)
	}
	if _, ok := nc.mutation.IsScience(); !ok {
		v := ncharacter.DefaultIsScience
		nc.mutation.SetIsScience(v)
	}
	if _, ok := nc.mutation.ScienceStroke(); !ok {
		v := ncharacter.DefaultScienceStroke
		nc.mutation.SetScienceStroke(v)
	}
	if _, ok := nc.mutation.WuXing(); !ok {
		v := ncharacter.DefaultWuXing
		nc.mutation.SetWuXing(v)
	}
	if _, ok := nc.mutation.Lucky(); !ok {
		v := ncharacter.DefaultLucky
		nc.mutation.SetLucky(v)
	}
	if _, ok := nc.mutation.Explanation(); !ok {
		v := ncharacter.DefaultExplanation
		nc.mutation.SetExplanation(v)
	}
	if _, ok := nc.mutation.Comment(); !ok {
		v := ncharacter.DefaultComment
		nc.mutation.SetComment(v)
	}
	if _, ok := nc.mutation.NeedFix(); !ok {
		v := ncharacter.DefaultNeedFix
		nc.mutation.SetNeedFix(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := ncharacter.DefaultID
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NCharacterCreate) check() error {
	if _, ok := nc.mutation.PinYin(); !ok {
		return &ValidationError{Name: "pin_yin", err: errors.New(`ent: missing required field "NCharacter.pin_yin"`)}
	}
	if _, ok := nc.mutation.Char(); !ok {
		return &ValidationError{Name: "char", err: errors.New(`ent: missing required field "NCharacter.char"`)}
	}
	if _, ok := nc.mutation.CharStroke(); !ok {
		return &ValidationError{Name: "char_stroke", err: errors.New(`ent: missing required field "NCharacter.char_stroke"`)}
	}
	if _, ok := nc.mutation.Radical(); !ok {
		return &ValidationError{Name: "radical", err: errors.New(`ent: missing required field "NCharacter.radical"`)}
	}
	if _, ok := nc.mutation.RadicalStroke(); !ok {
		return &ValidationError{Name: "radical_stroke", err: errors.New(`ent: missing required field "NCharacter.radical_stroke"`)}
	}
	if _, ok := nc.mutation.IsRegular(); !ok {
		return &ValidationError{Name: "is_regular", err: errors.New(`ent: missing required field "NCharacter.is_regular"`)}
	}
	if _, ok := nc.mutation.IsSimplified(); !ok {
		return &ValidationError{Name: "is_simplified", err: errors.New(`ent: missing required field "NCharacter.is_simplified"`)}
	}
	if _, ok := nc.mutation.SimplifiedID(); !ok {
		return &ValidationError{Name: "simplified_id", err: errors.New(`ent: missing required field "NCharacter.simplified_id"`)}
	}
	if _, ok := nc.mutation.IsTraditional(); !ok {
		return &ValidationError{Name: "is_traditional", err: errors.New(`ent: missing required field "NCharacter.is_traditional"`)}
	}
	if _, ok := nc.mutation.TraditionalID(); !ok {
		return &ValidationError{Name: "traditional_id", err: errors.New(`ent: missing required field "NCharacter.traditional_id"`)}
	}
	if _, ok := nc.mutation.IsKangXi(); !ok {
		return &ValidationError{Name: "is_kang_xi", err: errors.New(`ent: missing required field "NCharacter.is_kang_xi"`)}
	}
	if _, ok := nc.mutation.KangXiID(); !ok {
		return &ValidationError{Name: "kang_xi_id", err: errors.New(`ent: missing required field "NCharacter.kang_xi_id"`)}
	}
	if _, ok := nc.mutation.IsVariant(); !ok {
		return &ValidationError{Name: "is_variant", err: errors.New(`ent: missing required field "NCharacter.is_variant"`)}
	}
	if _, ok := nc.mutation.VariantID(); !ok {
		return &ValidationError{Name: "variant_id", err: errors.New(`ent: missing required field "NCharacter.variant_id"`)}
	}
	if _, ok := nc.mutation.IsScience(); !ok {
		return &ValidationError{Name: "is_science", err: errors.New(`ent: missing required field "NCharacter.is_science"`)}
	}
	if _, ok := nc.mutation.ScienceStroke(); !ok {
		return &ValidationError{Name: "science_stroke", err: errors.New(`ent: missing required field "NCharacter.science_stroke"`)}
	}
	if _, ok := nc.mutation.WuXing(); !ok {
		return &ValidationError{Name: "wu_xing", err: errors.New(`ent: missing required field "NCharacter.wu_xing"`)}
	}
	if _, ok := nc.mutation.Lucky(); !ok {
		return &ValidationError{Name: "lucky", err: errors.New(`ent: missing required field "NCharacter.lucky"`)}
	}
	if _, ok := nc.mutation.Explanation(); !ok {
		return &ValidationError{Name: "explanation", err: errors.New(`ent: missing required field "NCharacter.explanation"`)}
	}
	if _, ok := nc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "NCharacter.comment"`)}
	}
	if _, ok := nc.mutation.NeedFix(); !ok {
		return &ValidationError{Name: "need_fix", err: errors.New(`ent: missing required field "NCharacter.need_fix"`)}
	}
	return nil
}

func (nc *NCharacterCreate) sqlSave(ctx context.Context) (*NCharacter, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NCharacterCreate) createSpec() (*NCharacter, *sqlgraph.CreateSpec) {
	var (
		_node = &NCharacter{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(ncharacter.Table, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeInt))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeJSON, value)
		_node.PinYin = value
	}
	if value, ok := nc.mutation.Char(); ok {
		_spec.SetField(ncharacter.FieldChar, field.TypeString, value)
		_node.Char = value
	}
	if value, ok := nc.mutation.CharStroke(); ok {
		_spec.SetField(ncharacter.FieldCharStroke, field.TypeInt, value)
		_node.CharStroke = value
	}
	if value, ok := nc.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
		_node.Radical = value
	}
	if value, ok := nc.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
		_node.RadicalStroke = value
	}
	if value, ok := nc.mutation.IsRegular(); ok {
		_spec.SetField(ncharacter.FieldIsRegular, field.TypeBool, value)
		_node.IsRegular = value
	}
	if value, ok := nc.mutation.IsSimplified(); ok {
		_spec.SetField(ncharacter.FieldIsSimplified, field.TypeBool, value)
		_node.IsSimplified = value
	}
	if value, ok := nc.mutation.SimplifiedID(); ok {
		_spec.SetField(ncharacter.FieldSimplifiedID, field.TypeJSON, value)
		_node.SimplifiedID = value
	}
	if value, ok := nc.mutation.IsTraditional(); ok {
		_spec.SetField(ncharacter.FieldIsTraditional, field.TypeBool, value)
		_node.IsTraditional = value
	}
	if value, ok := nc.mutation.TraditionalID(); ok {
		_spec.SetField(ncharacter.FieldTraditionalID, field.TypeJSON, value)
		_node.TraditionalID = value
	}
	if value, ok := nc.mutation.IsKangXi(); ok {
		_spec.SetField(ncharacter.FieldIsKangXi, field.TypeBool, value)
		_node.IsKangXi = value
	}
	if value, ok := nc.mutation.KangXiID(); ok {
		_spec.SetField(ncharacter.FieldKangXiID, field.TypeJSON, value)
		_node.KangXiID = value
	}
	if value, ok := nc.mutation.IsVariant(); ok {
		_spec.SetField(ncharacter.FieldIsVariant, field.TypeBool, value)
		_node.IsVariant = value
	}
	if value, ok := nc.mutation.VariantID(); ok {
		_spec.SetField(ncharacter.FieldVariantID, field.TypeJSON, value)
		_node.VariantID = value
	}
	if value, ok := nc.mutation.IsScience(); ok {
		_spec.SetField(ncharacter.FieldIsScience, field.TypeBool, value)
		_node.IsScience = value
	}
	if value, ok := nc.mutation.ScienceStroke(); ok {
		_spec.SetField(ncharacter.FieldScienceStroke, field.TypeInt, value)
		_node.ScienceStroke = value
	}
	if value, ok := nc.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
		_node.WuXing = value
	}
	if value, ok := nc.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
		_node.Lucky = value
	}
	if value, ok := nc.mutation.Explanation(); ok {
		_spec.SetField(ncharacter.FieldExplanation, field.TypeString, value)
		_node.Explanation = value
	}
	if value, ok := nc.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := nc.mutation.NeedFix(); ok {
		_spec.SetField(ncharacter.FieldNeedFix, field.TypeBool, value)
		_node.NeedFix = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NCharacter.Create().
//		SetPinYin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NCharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (nc *NCharacterCreate) OnConflict(opts ...sql.ConflictOption) *NCharacterUpsertOne {
	nc.conflict = opts
	return &NCharacterUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NCharacterCreate) OnConflictColumns(columns ...string) *NCharacterUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NCharacterUpsertOne{
		create: nc,
	}
}

type (
	// NCharacterUpsertOne is the builder for "upsert"-ing
	//  one NCharacter node.
	NCharacterUpsertOne struct {
		create *NCharacterCreate
	}

	// NCharacterUpsert is the "OnConflict" setter.
	NCharacterUpsert struct {
		*sql.UpdateSet
	}
)

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsert) SetPinYin(v []string) *NCharacterUpsert {
	u.Set(ncharacter.FieldPinYin, v)
	return u
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdatePinYin() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldPinYin)
	return u
}

// SetChar sets the "char" field.
func (u *NCharacterUpsert) SetChar(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldChar, v)
	return u
}

// UpdateChar sets the "char" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateChar() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldChar)
	return u
}

// SetCharStroke sets the "char_stroke" field.
func (u *NCharacterUpsert) SetCharStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldCharStroke, v)
	return u
}

// UpdateCharStroke sets the "char_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateCharStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldCharStroke)
	return u
}

// AddCharStroke adds v to the "char_stroke" field.
func (u *NCharacterUpsert) AddCharStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldCharStroke, v)
	return u
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsert) SetRadical(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldRadical, v)
	return u
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRadical() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRadical)
	return u
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsert) SetRadicalStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldRadicalStroke, v)
	return u
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRadicalStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRadicalStroke)
	return u
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsert) AddRadicalStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldRadicalStroke, v)
	return u
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsert) SetIsRegular(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsRegular, v)
	return u
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsRegular() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsRegular)
	return u
}

// SetIsSimplified sets the "is_simplified" field.
func (u *NCharacterUpsert) SetIsSimplified(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsSimplified, v)
	return u
}

// UpdateIsSimplified sets the "is_simplified" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsSimplified() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsSimplified)
	return u
}

// SetSimplifiedID sets the "simplified_id" field.
func (u *NCharacterUpsert) SetSimplifiedID(v []int) *NCharacterUpsert {
	u.Set(ncharacter.FieldSimplifiedID, v)
	return u
}

// UpdateSimplifiedID sets the "simplified_id" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateSimplifiedID() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldSimplifiedID)
	return u
}

// SetIsTraditional sets the "is_traditional" field.
func (u *NCharacterUpsert) SetIsTraditional(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsTraditional, v)
	return u
}

// UpdateIsTraditional sets the "is_traditional" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsTraditional() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsTraditional)
	return u
}

// SetTraditionalID sets the "traditional_id" field.
func (u *NCharacterUpsert) SetTraditionalID(v []int) *NCharacterUpsert {
	u.Set(ncharacter.FieldTraditionalID, v)
	return u
}

// UpdateTraditionalID sets the "traditional_id" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateTraditionalID() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldTraditionalID)
	return u
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *NCharacterUpsert) SetIsKangXi(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsKangXi, v)
	return u
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsKangXi() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsKangXi)
	return u
}

// SetKangXiID sets the "kang_xi_id" field.
func (u *NCharacterUpsert) SetKangXiID(v []int) *NCharacterUpsert {
	u.Set(ncharacter.FieldKangXiID, v)
	return u
}

// UpdateKangXiID sets the "kang_xi_id" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateKangXiID() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldKangXiID)
	return u
}

// SetIsVariant sets the "is_variant" field.
func (u *NCharacterUpsert) SetIsVariant(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsVariant, v)
	return u
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsVariant() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsVariant)
	return u
}

// SetVariantID sets the "variant_id" field.
func (u *NCharacterUpsert) SetVariantID(v []int) *NCharacterUpsert {
	u.Set(ncharacter.FieldVariantID, v)
	return u
}

// UpdateVariantID sets the "variant_id" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateVariantID() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldVariantID)
	return u
}

// SetIsScience sets the "is_science" field.
func (u *NCharacterUpsert) SetIsScience(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsScience, v)
	return u
}

// UpdateIsScience sets the "is_science" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsScience() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsScience)
	return u
}

// SetScienceStroke sets the "science_stroke" field.
func (u *NCharacterUpsert) SetScienceStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldScienceStroke, v)
	return u
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateScienceStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldScienceStroke)
	return u
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *NCharacterUpsert) AddScienceStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldScienceStroke, v)
	return u
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsert) SetWuXing(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldWuXing, v)
	return u
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateWuXing() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldWuXing)
	return u
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsert) SetLucky(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldLucky, v)
	return u
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateLucky() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldLucky)
	return u
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsert) SetExplanation(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldExplanation, v)
	return u
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateExplanation() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldExplanation)
	return u
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsert) SetComment(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateComment() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldComment)
	return u
}

// SetNeedFix sets the "need_fix" field.
func (u *NCharacterUpsert) SetNeedFix(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldNeedFix, v)
	return u
}

// UpdateNeedFix sets the "need_fix" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateNeedFix() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldNeedFix)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ncharacter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NCharacterUpsertOne) UpdateNewValues() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ncharacter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NCharacterUpsertOne) Ignore() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NCharacterUpsertOne) DoNothing() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NCharacterCreate.OnConflict
// documentation for more info.
func (u *NCharacterUpsertOne) Update(set func(*NCharacterUpsert)) *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NCharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsertOne) SetPinYin(v []string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdatePinYin() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetChar sets the "char" field.
func (u *NCharacterUpsertOne) SetChar(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChar(v)
	})
}

// UpdateChar sets the "char" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateChar() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChar()
	})
}

// SetCharStroke sets the "char_stroke" field.
func (u *NCharacterUpsertOne) SetCharStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetCharStroke(v)
	})
}

// AddCharStroke adds v to the "char_stroke" field.
func (u *NCharacterUpsertOne) AddCharStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddCharStroke(v)
	})
}

// UpdateCharStroke sets the "char_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateCharStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateCharStroke()
	})
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsertOne) SetRadical(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRadical() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsertOne) SetRadicalStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsertOne) AddRadicalStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRadicalStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsertOne) SetIsRegular(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsRegular(v)
	})
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsRegular() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsRegular()
	})
}

// SetIsSimplified sets the "is_simplified" field.
func (u *NCharacterUpsertOne) SetIsSimplified(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsSimplified(v)
	})
}

// UpdateIsSimplified sets the "is_simplified" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsSimplified() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsSimplified()
	})
}

// SetSimplifiedID sets the "simplified_id" field.
func (u *NCharacterUpsertOne) SetSimplifiedID(v []int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetSimplifiedID(v)
	})
}

// UpdateSimplifiedID sets the "simplified_id" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateSimplifiedID() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateSimplifiedID()
	})
}

// SetIsTraditional sets the "is_traditional" field.
func (u *NCharacterUpsertOne) SetIsTraditional(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsTraditional(v)
	})
}

// UpdateIsTraditional sets the "is_traditional" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsTraditional() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsTraditional()
	})
}

// SetTraditionalID sets the "traditional_id" field.
func (u *NCharacterUpsertOne) SetTraditionalID(v []int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetTraditionalID(v)
	})
}

// UpdateTraditionalID sets the "traditional_id" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateTraditionalID() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateTraditionalID()
	})
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *NCharacterUpsertOne) SetIsKangXi(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsKangXi(v)
	})
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsKangXi() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsKangXi()
	})
}

// SetKangXiID sets the "kang_xi_id" field.
func (u *NCharacterUpsertOne) SetKangXiID(v []int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetKangXiID(v)
	})
}

// UpdateKangXiID sets the "kang_xi_id" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateKangXiID() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateKangXiID()
	})
}

// SetIsVariant sets the "is_variant" field.
func (u *NCharacterUpsertOne) SetIsVariant(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsVariant(v)
	})
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsVariant() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsVariant()
	})
}

// SetVariantID sets the "variant_id" field.
func (u *NCharacterUpsertOne) SetVariantID(v []int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetVariantID(v)
	})
}

// UpdateVariantID sets the "variant_id" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateVariantID() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateVariantID()
	})
}

// SetIsScience sets the "is_science" field.
func (u *NCharacterUpsertOne) SetIsScience(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsScience(v)
	})
}

// UpdateIsScience sets the "is_science" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsScience() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsScience()
	})
}

// SetScienceStroke sets the "science_stroke" field.
func (u *NCharacterUpsertOne) SetScienceStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetScienceStroke(v)
	})
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *NCharacterUpsertOne) AddScienceStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddScienceStroke(v)
	})
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateScienceStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateScienceStroke()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsertOne) SetWuXing(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateWuXing() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsertOne) SetLucky(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateLucky() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsertOne) SetExplanation(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetExplanation(v)
	})
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateExplanation() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateExplanation()
	})
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsertOne) SetComment(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateComment() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateComment()
	})
}

// SetNeedFix sets the "need_fix" field.
func (u *NCharacterUpsertOne) SetNeedFix(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetNeedFix(v)
	})
}

// UpdateNeedFix sets the "need_fix" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateNeedFix() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateNeedFix()
	})
}

// Exec executes the query.
func (u *NCharacterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NCharacterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NCharacterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NCharacterUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NCharacterUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NCharacterCreateBulk is the builder for creating many NCharacter entities in bulk.
type NCharacterCreateBulk struct {
	config
	builders []*NCharacterCreate
	conflict []sql.ConflictOption
}

// Save creates the NCharacter entities in the database.
func (ncb *NCharacterCreateBulk) Save(ctx context.Context) ([]*NCharacter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*NCharacter, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NCharacterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NCharacterCreateBulk) SaveX(ctx context.Context) []*NCharacter {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NCharacterCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NCharacterCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NCharacter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NCharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (ncb *NCharacterCreateBulk) OnConflict(opts ...sql.ConflictOption) *NCharacterUpsertBulk {
	ncb.conflict = opts
	return &NCharacterUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NCharacterCreateBulk) OnConflictColumns(columns ...string) *NCharacterUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NCharacterUpsertBulk{
		create: ncb,
	}
}

// NCharacterUpsertBulk is the builder for "upsert"-ing
// a bulk of NCharacter nodes.
type NCharacterUpsertBulk struct {
	create *NCharacterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ncharacter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NCharacterUpsertBulk) UpdateNewValues() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ncharacter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NCharacterUpsertBulk) Ignore() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NCharacterUpsertBulk) DoNothing() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NCharacterCreateBulk.OnConflict
// documentation for more info.
func (u *NCharacterUpsertBulk) Update(set func(*NCharacterUpsert)) *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NCharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsertBulk) SetPinYin(v []string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdatePinYin() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetChar sets the "char" field.
func (u *NCharacterUpsertBulk) SetChar(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChar(v)
	})
}

// UpdateChar sets the "char" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateChar() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChar()
	})
}

// SetCharStroke sets the "char_stroke" field.
func (u *NCharacterUpsertBulk) SetCharStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetCharStroke(v)
	})
}

// AddCharStroke adds v to the "char_stroke" field.
func (u *NCharacterUpsertBulk) AddCharStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddCharStroke(v)
	})
}

// UpdateCharStroke sets the "char_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateCharStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateCharStroke()
	})
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsertBulk) SetRadical(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRadical() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsertBulk) SetRadicalStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsertBulk) AddRadicalStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRadicalStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsertBulk) SetIsRegular(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsRegular(v)
	})
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsRegular() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsRegular()
	})
}

// SetIsSimplified sets the "is_simplified" field.
func (u *NCharacterUpsertBulk) SetIsSimplified(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsSimplified(v)
	})
}

// UpdateIsSimplified sets the "is_simplified" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsSimplified() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsSimplified()
	})
}

// SetSimplifiedID sets the "simplified_id" field.
func (u *NCharacterUpsertBulk) SetSimplifiedID(v []int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetSimplifiedID(v)
	})
}

// UpdateSimplifiedID sets the "simplified_id" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateSimplifiedID() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateSimplifiedID()
	})
}

// SetIsTraditional sets the "is_traditional" field.
func (u *NCharacterUpsertBulk) SetIsTraditional(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsTraditional(v)
	})
}

// UpdateIsTraditional sets the "is_traditional" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsTraditional() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsTraditional()
	})
}

// SetTraditionalID sets the "traditional_id" field.
func (u *NCharacterUpsertBulk) SetTraditionalID(v []int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetTraditionalID(v)
	})
}

// UpdateTraditionalID sets the "traditional_id" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateTraditionalID() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateTraditionalID()
	})
}

// SetIsKangXi sets the "is_kang_xi" field.
func (u *NCharacterUpsertBulk) SetIsKangXi(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsKangXi(v)
	})
}

// UpdateIsKangXi sets the "is_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsKangXi() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsKangXi()
	})
}

// SetKangXiID sets the "kang_xi_id" field.
func (u *NCharacterUpsertBulk) SetKangXiID(v []int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetKangXiID(v)
	})
}

// UpdateKangXiID sets the "kang_xi_id" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateKangXiID() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateKangXiID()
	})
}

// SetIsVariant sets the "is_variant" field.
func (u *NCharacterUpsertBulk) SetIsVariant(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsVariant(v)
	})
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsVariant() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsVariant()
	})
}

// SetVariantID sets the "variant_id" field.
func (u *NCharacterUpsertBulk) SetVariantID(v []int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetVariantID(v)
	})
}

// UpdateVariantID sets the "variant_id" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateVariantID() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateVariantID()
	})
}

// SetIsScience sets the "is_science" field.
func (u *NCharacterUpsertBulk) SetIsScience(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsScience(v)
	})
}

// UpdateIsScience sets the "is_science" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsScience() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsScience()
	})
}

// SetScienceStroke sets the "science_stroke" field.
func (u *NCharacterUpsertBulk) SetScienceStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetScienceStroke(v)
	})
}

// AddScienceStroke adds v to the "science_stroke" field.
func (u *NCharacterUpsertBulk) AddScienceStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddScienceStroke(v)
	})
}

// UpdateScienceStroke sets the "science_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateScienceStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateScienceStroke()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsertBulk) SetWuXing(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateWuXing() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsertBulk) SetLucky(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateLucky() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsertBulk) SetExplanation(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetExplanation(v)
	})
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateExplanation() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateExplanation()
	})
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsertBulk) SetComment(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateComment() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateComment()
	})
}

// SetNeedFix sets the "need_fix" field.
func (u *NCharacterUpsertBulk) SetNeedFix(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetNeedFix(v)
	})
}

// UpdateNeedFix sets the "need_fix" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateNeedFix() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateNeedFix()
	})
}

// Exec executes the query.
func (u *NCharacterUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NCharacterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NCharacterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NCharacterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
