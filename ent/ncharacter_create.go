// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/ncharacter"
)

// NCharacterCreate is the builder for creating a NCharacter entity.
type NCharacterCreate struct {
	config
	mutation *NCharacterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPinYin sets the "pin_yin" field.
func (nc *NCharacterCreate) SetPinYin(s string) *NCharacterCreate {
	nc.mutation.SetPinYin(s)
	return nc
}

// SetCh sets the "ch" field.
func (nc *NCharacterCreate) SetCh(s string) *NCharacterCreate {
	nc.mutation.SetCh(s)
	return nc
}

// SetChStroke sets the "ch_stroke" field.
func (nc *NCharacterCreate) SetChStroke(i int) *NCharacterCreate {
	nc.mutation.SetChStroke(i)
	return nc
}

// SetChType sets the "ch_type" field.
func (nc *NCharacterCreate) SetChType(i int) *NCharacterCreate {
	nc.mutation.SetChType(i)
	return nc
}

// SetNillableChType sets the "ch_type" field if the given value is not nil.
func (nc *NCharacterCreate) SetNillableChType(i *int) *NCharacterCreate {
	if i != nil {
		nc.SetChType(*i)
	}
	return nc
}

// SetRadical sets the "radical" field.
func (nc *NCharacterCreate) SetRadical(s string) *NCharacterCreate {
	nc.mutation.SetRadical(s)
	return nc
}

// SetRadicalStroke sets the "radical_stroke" field.
func (nc *NCharacterCreate) SetRadicalStroke(i int) *NCharacterCreate {
	nc.mutation.SetRadicalStroke(i)
	return nc
}

// SetRelate sets the "relate" field.
func (nc *NCharacterCreate) SetRelate(i int32) *NCharacterCreate {
	nc.mutation.SetRelate(i)
	return nc
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (nc *NCharacterCreate) SetRelateKangXi(i int32) *NCharacterCreate {
	nc.mutation.SetRelateKangXi(i)
	return nc
}

// SetRelateTraditional sets the "relate_traditional" field.
func (nc *NCharacterCreate) SetRelateTraditional(i int32) *NCharacterCreate {
	nc.mutation.SetRelateTraditional(i)
	return nc
}

// SetRelateVariant sets the "relate_variant" field.
func (nc *NCharacterCreate) SetRelateVariant(s []string) *NCharacterCreate {
	nc.mutation.SetRelateVariant(s)
	return nc
}

// SetIsNameScience sets the "is_name_science" field.
func (nc *NCharacterCreate) SetIsNameScience(b bool) *NCharacterCreate {
	nc.mutation.SetIsNameScience(b)
	return nc
}

// SetNameScienceChStroke sets the "name_science_ch_stroke" field.
func (nc *NCharacterCreate) SetNameScienceChStroke(i int) *NCharacterCreate {
	nc.mutation.SetNameScienceChStroke(i)
	return nc
}

// SetIsRegular sets the "is_regular" field.
func (nc *NCharacterCreate) SetIsRegular(b bool) *NCharacterCreate {
	nc.mutation.SetIsRegular(b)
	return nc
}

// SetWuXing sets the "wu_xing" field.
func (nc *NCharacterCreate) SetWuXing(s string) *NCharacterCreate {
	nc.mutation.SetWuXing(s)
	return nc
}

// SetLucky sets the "lucky" field.
func (nc *NCharacterCreate) SetLucky(s string) *NCharacterCreate {
	nc.mutation.SetLucky(s)
	return nc
}

// SetExplanation sets the "explanation" field.
func (nc *NCharacterCreate) SetExplanation(s string) *NCharacterCreate {
	nc.mutation.SetExplanation(s)
	return nc
}

// SetComment sets the "comment" field.
func (nc *NCharacterCreate) SetComment(s string) *NCharacterCreate {
	nc.mutation.SetComment(s)
	return nc
}

// SetID sets the "id" field.
func (nc *NCharacterCreate) SetID(i int32) *NCharacterCreate {
	nc.mutation.SetID(i)
	return nc
}

// Mutation returns the NCharacterMutation object of the builder.
func (nc *NCharacterCreate) Mutation() *NCharacterMutation {
	return nc.mutation
}

// Save creates the NCharacter in the database.
func (nc *NCharacterCreate) Save(ctx context.Context) (*NCharacter, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NCharacterCreate) SaveX(ctx context.Context) *NCharacter {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NCharacterCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NCharacterCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NCharacterCreate) defaults() {
	if _, ok := nc.mutation.ChType(); !ok {
		v := ncharacter.DefaultChType
		nc.mutation.SetChType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NCharacterCreate) check() error {
	if _, ok := nc.mutation.PinYin(); !ok {
		return &ValidationError{Name: "pin_yin", err: errors.New(`ent: missing required field "NCharacter.pin_yin"`)}
	}
	if _, ok := nc.mutation.Ch(); !ok {
		return &ValidationError{Name: "ch", err: errors.New(`ent: missing required field "NCharacter.ch"`)}
	}
	if _, ok := nc.mutation.ChStroke(); !ok {
		return &ValidationError{Name: "ch_stroke", err: errors.New(`ent: missing required field "NCharacter.ch_stroke"`)}
	}
	if _, ok := nc.mutation.ChType(); !ok {
		return &ValidationError{Name: "ch_type", err: errors.New(`ent: missing required field "NCharacter.ch_type"`)}
	}
	if _, ok := nc.mutation.Radical(); !ok {
		return &ValidationError{Name: "radical", err: errors.New(`ent: missing required field "NCharacter.radical"`)}
	}
	if _, ok := nc.mutation.RadicalStroke(); !ok {
		return &ValidationError{Name: "radical_stroke", err: errors.New(`ent: missing required field "NCharacter.radical_stroke"`)}
	}
	if _, ok := nc.mutation.Relate(); !ok {
		return &ValidationError{Name: "relate", err: errors.New(`ent: missing required field "NCharacter.relate"`)}
	}
	if _, ok := nc.mutation.RelateKangXi(); !ok {
		return &ValidationError{Name: "relate_kang_xi", err: errors.New(`ent: missing required field "NCharacter.relate_kang_xi"`)}
	}
	if _, ok := nc.mutation.RelateTraditional(); !ok {
		return &ValidationError{Name: "relate_traditional", err: errors.New(`ent: missing required field "NCharacter.relate_traditional"`)}
	}
	if _, ok := nc.mutation.RelateVariant(); !ok {
		return &ValidationError{Name: "relate_variant", err: errors.New(`ent: missing required field "NCharacter.relate_variant"`)}
	}
	if _, ok := nc.mutation.IsNameScience(); !ok {
		return &ValidationError{Name: "is_name_science", err: errors.New(`ent: missing required field "NCharacter.is_name_science"`)}
	}
	if _, ok := nc.mutation.NameScienceChStroke(); !ok {
		return &ValidationError{Name: "name_science_ch_stroke", err: errors.New(`ent: missing required field "NCharacter.name_science_ch_stroke"`)}
	}
	if _, ok := nc.mutation.IsRegular(); !ok {
		return &ValidationError{Name: "is_regular", err: errors.New(`ent: missing required field "NCharacter.is_regular"`)}
	}
	if _, ok := nc.mutation.WuXing(); !ok {
		return &ValidationError{Name: "wu_xing", err: errors.New(`ent: missing required field "NCharacter.wu_xing"`)}
	}
	if _, ok := nc.mutation.Lucky(); !ok {
		return &ValidationError{Name: "lucky", err: errors.New(`ent: missing required field "NCharacter.lucky"`)}
	}
	if _, ok := nc.mutation.Explanation(); !ok {
		return &ValidationError{Name: "explanation", err: errors.New(`ent: missing required field "NCharacter.explanation"`)}
	}
	if _, ok := nc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "NCharacter.comment"`)}
	}
	return nil
}

func (nc *NCharacterCreate) sqlSave(ctx context.Context) (*NCharacter, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NCharacterCreate) createSpec() (*NCharacter, *sqlgraph.CreateSpec) {
	var (
		_node = &NCharacter{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(ncharacter.Table, sqlgraph.NewFieldSpec(ncharacter.FieldID, field.TypeInt32))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.PinYin(); ok {
		_spec.SetField(ncharacter.FieldPinYin, field.TypeString, value)
		_node.PinYin = value
	}
	if value, ok := nc.mutation.Ch(); ok {
		_spec.SetField(ncharacter.FieldCh, field.TypeString, value)
		_node.Ch = value
	}
	if value, ok := nc.mutation.ChStroke(); ok {
		_spec.SetField(ncharacter.FieldChStroke, field.TypeInt, value)
		_node.ChStroke = value
	}
	if value, ok := nc.mutation.ChType(); ok {
		_spec.SetField(ncharacter.FieldChType, field.TypeInt, value)
		_node.ChType = value
	}
	if value, ok := nc.mutation.Radical(); ok {
		_spec.SetField(ncharacter.FieldRadical, field.TypeString, value)
		_node.Radical = value
	}
	if value, ok := nc.mutation.RadicalStroke(); ok {
		_spec.SetField(ncharacter.FieldRadicalStroke, field.TypeInt, value)
		_node.RadicalStroke = value
	}
	if value, ok := nc.mutation.Relate(); ok {
		_spec.SetField(ncharacter.FieldRelate, field.TypeInt32, value)
		_node.Relate = value
	}
	if value, ok := nc.mutation.RelateKangXi(); ok {
		_spec.SetField(ncharacter.FieldRelateKangXi, field.TypeInt32, value)
		_node.RelateKangXi = value
	}
	if value, ok := nc.mutation.RelateTraditional(); ok {
		_spec.SetField(ncharacter.FieldRelateTraditional, field.TypeInt32, value)
		_node.RelateTraditional = value
	}
	if value, ok := nc.mutation.RelateVariant(); ok {
		_spec.SetField(ncharacter.FieldRelateVariant, field.TypeJSON, value)
		_node.RelateVariant = value
	}
	if value, ok := nc.mutation.IsNameScience(); ok {
		_spec.SetField(ncharacter.FieldIsNameScience, field.TypeBool, value)
		_node.IsNameScience = value
	}
	if value, ok := nc.mutation.NameScienceChStroke(); ok {
		_spec.SetField(ncharacter.FieldNameScienceChStroke, field.TypeInt, value)
		_node.NameScienceChStroke = value
	}
	if value, ok := nc.mutation.IsRegular(); ok {
		_spec.SetField(ncharacter.FieldIsRegular, field.TypeBool, value)
		_node.IsRegular = value
	}
	if value, ok := nc.mutation.WuXing(); ok {
		_spec.SetField(ncharacter.FieldWuXing, field.TypeString, value)
		_node.WuXing = value
	}
	if value, ok := nc.mutation.Lucky(); ok {
		_spec.SetField(ncharacter.FieldLucky, field.TypeString, value)
		_node.Lucky = value
	}
	if value, ok := nc.mutation.Explanation(); ok {
		_spec.SetField(ncharacter.FieldExplanation, field.TypeString, value)
		_node.Explanation = value
	}
	if value, ok := nc.mutation.Comment(); ok {
		_spec.SetField(ncharacter.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NCharacter.Create().
//		SetPinYin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NCharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (nc *NCharacterCreate) OnConflict(opts ...sql.ConflictOption) *NCharacterUpsertOne {
	nc.conflict = opts
	return &NCharacterUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NCharacterCreate) OnConflictColumns(columns ...string) *NCharacterUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NCharacterUpsertOne{
		create: nc,
	}
}

type (
	// NCharacterUpsertOne is the builder for "upsert"-ing
	//  one NCharacter node.
	NCharacterUpsertOne struct {
		create *NCharacterCreate
	}

	// NCharacterUpsert is the "OnConflict" setter.
	NCharacterUpsert struct {
		*sql.UpdateSet
	}
)

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsert) SetPinYin(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldPinYin, v)
	return u
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdatePinYin() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldPinYin)
	return u
}

// SetCh sets the "ch" field.
func (u *NCharacterUpsert) SetCh(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldCh, v)
	return u
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateCh() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldCh)
	return u
}

// SetChStroke sets the "ch_stroke" field.
func (u *NCharacterUpsert) SetChStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldChStroke, v)
	return u
}

// UpdateChStroke sets the "ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateChStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldChStroke)
	return u
}

// AddChStroke adds v to the "ch_stroke" field.
func (u *NCharacterUpsert) AddChStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldChStroke, v)
	return u
}

// SetChType sets the "ch_type" field.
func (u *NCharacterUpsert) SetChType(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldChType, v)
	return u
}

// UpdateChType sets the "ch_type" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateChType() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldChType)
	return u
}

// AddChType adds v to the "ch_type" field.
func (u *NCharacterUpsert) AddChType(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldChType, v)
	return u
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsert) SetRadical(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldRadical, v)
	return u
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRadical() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRadical)
	return u
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsert) SetRadicalStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldRadicalStroke, v)
	return u
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRadicalStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRadicalStroke)
	return u
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsert) AddRadicalStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldRadicalStroke, v)
	return u
}

// SetRelate sets the "relate" field.
func (u *NCharacterUpsert) SetRelate(v int32) *NCharacterUpsert {
	u.Set(ncharacter.FieldRelate, v)
	return u
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRelate() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRelate)
	return u
}

// AddRelate adds v to the "relate" field.
func (u *NCharacterUpsert) AddRelate(v int32) *NCharacterUpsert {
	u.Add(ncharacter.FieldRelate, v)
	return u
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (u *NCharacterUpsert) SetRelateKangXi(v int32) *NCharacterUpsert {
	u.Set(ncharacter.FieldRelateKangXi, v)
	return u
}

// UpdateRelateKangXi sets the "relate_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRelateKangXi() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRelateKangXi)
	return u
}

// AddRelateKangXi adds v to the "relate_kang_xi" field.
func (u *NCharacterUpsert) AddRelateKangXi(v int32) *NCharacterUpsert {
	u.Add(ncharacter.FieldRelateKangXi, v)
	return u
}

// SetRelateTraditional sets the "relate_traditional" field.
func (u *NCharacterUpsert) SetRelateTraditional(v int32) *NCharacterUpsert {
	u.Set(ncharacter.FieldRelateTraditional, v)
	return u
}

// UpdateRelateTraditional sets the "relate_traditional" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRelateTraditional() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRelateTraditional)
	return u
}

// AddRelateTraditional adds v to the "relate_traditional" field.
func (u *NCharacterUpsert) AddRelateTraditional(v int32) *NCharacterUpsert {
	u.Add(ncharacter.FieldRelateTraditional, v)
	return u
}

// SetRelateVariant sets the "relate_variant" field.
func (u *NCharacterUpsert) SetRelateVariant(v []string) *NCharacterUpsert {
	u.Set(ncharacter.FieldRelateVariant, v)
	return u
}

// UpdateRelateVariant sets the "relate_variant" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateRelateVariant() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldRelateVariant)
	return u
}

// SetIsNameScience sets the "is_name_science" field.
func (u *NCharacterUpsert) SetIsNameScience(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsNameScience, v)
	return u
}

// UpdateIsNameScience sets the "is_name_science" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsNameScience() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsNameScience)
	return u
}

// SetNameScienceChStroke sets the "name_science_ch_stroke" field.
func (u *NCharacterUpsert) SetNameScienceChStroke(v int) *NCharacterUpsert {
	u.Set(ncharacter.FieldNameScienceChStroke, v)
	return u
}

// UpdateNameScienceChStroke sets the "name_science_ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateNameScienceChStroke() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldNameScienceChStroke)
	return u
}

// AddNameScienceChStroke adds v to the "name_science_ch_stroke" field.
func (u *NCharacterUpsert) AddNameScienceChStroke(v int) *NCharacterUpsert {
	u.Add(ncharacter.FieldNameScienceChStroke, v)
	return u
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsert) SetIsRegular(v bool) *NCharacterUpsert {
	u.Set(ncharacter.FieldIsRegular, v)
	return u
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateIsRegular() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldIsRegular)
	return u
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsert) SetWuXing(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldWuXing, v)
	return u
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateWuXing() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldWuXing)
	return u
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsert) SetLucky(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldLucky, v)
	return u
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateLucky() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldLucky)
	return u
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsert) SetExplanation(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldExplanation, v)
	return u
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateExplanation() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldExplanation)
	return u
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsert) SetComment(v string) *NCharacterUpsert {
	u.Set(ncharacter.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsert) UpdateComment() *NCharacterUpsert {
	u.SetExcluded(ncharacter.FieldComment)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ncharacter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NCharacterUpsertOne) UpdateNewValues() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ncharacter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NCharacterUpsertOne) Ignore() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NCharacterUpsertOne) DoNothing() *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NCharacterCreate.OnConflict
// documentation for more info.
func (u *NCharacterUpsertOne) Update(set func(*NCharacterUpsert)) *NCharacterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NCharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsertOne) SetPinYin(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdatePinYin() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetCh sets the "ch" field.
func (u *NCharacterUpsertOne) SetCh(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetCh(v)
	})
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateCh() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateCh()
	})
}

// SetChStroke sets the "ch_stroke" field.
func (u *NCharacterUpsertOne) SetChStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChStroke(v)
	})
}

// AddChStroke adds v to the "ch_stroke" field.
func (u *NCharacterUpsertOne) AddChStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddChStroke(v)
	})
}

// UpdateChStroke sets the "ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateChStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChStroke()
	})
}

// SetChType sets the "ch_type" field.
func (u *NCharacterUpsertOne) SetChType(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChType(v)
	})
}

// AddChType adds v to the "ch_type" field.
func (u *NCharacterUpsertOne) AddChType(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddChType(v)
	})
}

// UpdateChType sets the "ch_type" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateChType() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChType()
	})
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsertOne) SetRadical(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRadical() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsertOne) SetRadicalStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsertOne) AddRadicalStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRadicalStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetRelate sets the "relate" field.
func (u *NCharacterUpsertOne) SetRelate(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelate(v)
	})
}

// AddRelate adds v to the "relate" field.
func (u *NCharacterUpsertOne) AddRelate(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelate(v)
	})
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRelate() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelate()
	})
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (u *NCharacterUpsertOne) SetRelateKangXi(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateKangXi(v)
	})
}

// AddRelateKangXi adds v to the "relate_kang_xi" field.
func (u *NCharacterUpsertOne) AddRelateKangXi(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelateKangXi(v)
	})
}

// UpdateRelateKangXi sets the "relate_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRelateKangXi() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateKangXi()
	})
}

// SetRelateTraditional sets the "relate_traditional" field.
func (u *NCharacterUpsertOne) SetRelateTraditional(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateTraditional(v)
	})
}

// AddRelateTraditional adds v to the "relate_traditional" field.
func (u *NCharacterUpsertOne) AddRelateTraditional(v int32) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelateTraditional(v)
	})
}

// UpdateRelateTraditional sets the "relate_traditional" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRelateTraditional() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateTraditional()
	})
}

// SetRelateVariant sets the "relate_variant" field.
func (u *NCharacterUpsertOne) SetRelateVariant(v []string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateVariant(v)
	})
}

// UpdateRelateVariant sets the "relate_variant" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateRelateVariant() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateVariant()
	})
}

// SetIsNameScience sets the "is_name_science" field.
func (u *NCharacterUpsertOne) SetIsNameScience(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsNameScience(v)
	})
}

// UpdateIsNameScience sets the "is_name_science" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsNameScience() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsNameScience()
	})
}

// SetNameScienceChStroke sets the "name_science_ch_stroke" field.
func (u *NCharacterUpsertOne) SetNameScienceChStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetNameScienceChStroke(v)
	})
}

// AddNameScienceChStroke adds v to the "name_science_ch_stroke" field.
func (u *NCharacterUpsertOne) AddNameScienceChStroke(v int) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddNameScienceChStroke(v)
	})
}

// UpdateNameScienceChStroke sets the "name_science_ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateNameScienceChStroke() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateNameScienceChStroke()
	})
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsertOne) SetIsRegular(v bool) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsRegular(v)
	})
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateIsRegular() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsRegular()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsertOne) SetWuXing(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateWuXing() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsertOne) SetLucky(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateLucky() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsertOne) SetExplanation(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetExplanation(v)
	})
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateExplanation() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateExplanation()
	})
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsertOne) SetComment(v string) *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsertOne) UpdateComment() *NCharacterUpsertOne {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateComment()
	})
}

// Exec executes the query.
func (u *NCharacterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NCharacterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NCharacterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NCharacterUpsertOne) ID(ctx context.Context) (id int32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NCharacterUpsertOne) IDX(ctx context.Context) int32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NCharacterCreateBulk is the builder for creating many NCharacter entities in bulk.
type NCharacterCreateBulk struct {
	config
	err      error
	builders []*NCharacterCreate
	conflict []sql.ConflictOption
}

// Save creates the NCharacter entities in the database.
func (ncb *NCharacterCreateBulk) Save(ctx context.Context) ([]*NCharacter, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*NCharacter, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NCharacterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NCharacterCreateBulk) SaveX(ctx context.Context) []*NCharacter {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NCharacterCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NCharacterCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NCharacter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NCharacterUpsert) {
//			SetPinYin(v+v).
//		}).
//		Exec(ctx)
func (ncb *NCharacterCreateBulk) OnConflict(opts ...sql.ConflictOption) *NCharacterUpsertBulk {
	ncb.conflict = opts
	return &NCharacterUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NCharacterCreateBulk) OnConflictColumns(columns ...string) *NCharacterUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NCharacterUpsertBulk{
		create: ncb,
	}
}

// NCharacterUpsertBulk is the builder for "upsert"-ing
// a bulk of NCharacter nodes.
type NCharacterUpsertBulk struct {
	create *NCharacterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ncharacter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NCharacterUpsertBulk) UpdateNewValues() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ncharacter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NCharacter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NCharacterUpsertBulk) Ignore() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NCharacterUpsertBulk) DoNothing() *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NCharacterCreateBulk.OnConflict
// documentation for more info.
func (u *NCharacterUpsertBulk) Update(set func(*NCharacterUpsert)) *NCharacterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NCharacterUpsert{UpdateSet: update})
	}))
	return u
}

// SetPinYin sets the "pin_yin" field.
func (u *NCharacterUpsertBulk) SetPinYin(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetPinYin(v)
	})
}

// UpdatePinYin sets the "pin_yin" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdatePinYin() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdatePinYin()
	})
}

// SetCh sets the "ch" field.
func (u *NCharacterUpsertBulk) SetCh(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetCh(v)
	})
}

// UpdateCh sets the "ch" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateCh() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateCh()
	})
}

// SetChStroke sets the "ch_stroke" field.
func (u *NCharacterUpsertBulk) SetChStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChStroke(v)
	})
}

// AddChStroke adds v to the "ch_stroke" field.
func (u *NCharacterUpsertBulk) AddChStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddChStroke(v)
	})
}

// UpdateChStroke sets the "ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateChStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChStroke()
	})
}

// SetChType sets the "ch_type" field.
func (u *NCharacterUpsertBulk) SetChType(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetChType(v)
	})
}

// AddChType adds v to the "ch_type" field.
func (u *NCharacterUpsertBulk) AddChType(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddChType(v)
	})
}

// UpdateChType sets the "ch_type" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateChType() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateChType()
	})
}

// SetRadical sets the "radical" field.
func (u *NCharacterUpsertBulk) SetRadical(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadical(v)
	})
}

// UpdateRadical sets the "radical" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRadical() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadical()
	})
}

// SetRadicalStroke sets the "radical_stroke" field.
func (u *NCharacterUpsertBulk) SetRadicalStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRadicalStroke(v)
	})
}

// AddRadicalStroke adds v to the "radical_stroke" field.
func (u *NCharacterUpsertBulk) AddRadicalStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRadicalStroke(v)
	})
}

// UpdateRadicalStroke sets the "radical_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRadicalStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRadicalStroke()
	})
}

// SetRelate sets the "relate" field.
func (u *NCharacterUpsertBulk) SetRelate(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelate(v)
	})
}

// AddRelate adds v to the "relate" field.
func (u *NCharacterUpsertBulk) AddRelate(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelate(v)
	})
}

// UpdateRelate sets the "relate" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRelate() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelate()
	})
}

// SetRelateKangXi sets the "relate_kang_xi" field.
func (u *NCharacterUpsertBulk) SetRelateKangXi(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateKangXi(v)
	})
}

// AddRelateKangXi adds v to the "relate_kang_xi" field.
func (u *NCharacterUpsertBulk) AddRelateKangXi(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelateKangXi(v)
	})
}

// UpdateRelateKangXi sets the "relate_kang_xi" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRelateKangXi() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateKangXi()
	})
}

// SetRelateTraditional sets the "relate_traditional" field.
func (u *NCharacterUpsertBulk) SetRelateTraditional(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateTraditional(v)
	})
}

// AddRelateTraditional adds v to the "relate_traditional" field.
func (u *NCharacterUpsertBulk) AddRelateTraditional(v int32) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddRelateTraditional(v)
	})
}

// UpdateRelateTraditional sets the "relate_traditional" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRelateTraditional() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateTraditional()
	})
}

// SetRelateVariant sets the "relate_variant" field.
func (u *NCharacterUpsertBulk) SetRelateVariant(v []string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetRelateVariant(v)
	})
}

// UpdateRelateVariant sets the "relate_variant" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateRelateVariant() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateRelateVariant()
	})
}

// SetIsNameScience sets the "is_name_science" field.
func (u *NCharacterUpsertBulk) SetIsNameScience(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsNameScience(v)
	})
}

// UpdateIsNameScience sets the "is_name_science" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsNameScience() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsNameScience()
	})
}

// SetNameScienceChStroke sets the "name_science_ch_stroke" field.
func (u *NCharacterUpsertBulk) SetNameScienceChStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetNameScienceChStroke(v)
	})
}

// AddNameScienceChStroke adds v to the "name_science_ch_stroke" field.
func (u *NCharacterUpsertBulk) AddNameScienceChStroke(v int) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.AddNameScienceChStroke(v)
	})
}

// UpdateNameScienceChStroke sets the "name_science_ch_stroke" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateNameScienceChStroke() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateNameScienceChStroke()
	})
}

// SetIsRegular sets the "is_regular" field.
func (u *NCharacterUpsertBulk) SetIsRegular(v bool) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetIsRegular(v)
	})
}

// UpdateIsRegular sets the "is_regular" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateIsRegular() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateIsRegular()
	})
}

// SetWuXing sets the "wu_xing" field.
func (u *NCharacterUpsertBulk) SetWuXing(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetWuXing(v)
	})
}

// UpdateWuXing sets the "wu_xing" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateWuXing() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateWuXing()
	})
}

// SetLucky sets the "lucky" field.
func (u *NCharacterUpsertBulk) SetLucky(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetLucky(v)
	})
}

// UpdateLucky sets the "lucky" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateLucky() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateLucky()
	})
}

// SetExplanation sets the "explanation" field.
func (u *NCharacterUpsertBulk) SetExplanation(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetExplanation(v)
	})
}

// UpdateExplanation sets the "explanation" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateExplanation() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateExplanation()
	})
}

// SetComment sets the "comment" field.
func (u *NCharacterUpsertBulk) SetComment(v string) *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *NCharacterUpsertBulk) UpdateComment() *NCharacterUpsertBulk {
	return u.Update(func(s *NCharacterUpsert) {
		s.UpdateComment()
	})
}

// Exec executes the query.
func (u *NCharacterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NCharacterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NCharacterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NCharacterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
