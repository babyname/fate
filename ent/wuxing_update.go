// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/babyname/fate/ent/predicate"
	"github.com/babyname/fate/ent/wuxing"
)

// WuXingUpdate is the builder for updating WuXing entities.
type WuXingUpdate struct {
	config
	hooks    []Hook
	mutation *WuXingMutation
}

// Where appends a list predicates to the WuXingUpdate builder.
func (wxu *WuXingUpdate) Where(ps ...predicate.WuXing) *WuXingUpdate {
	wxu.mutation.Where(ps...)
	return wxu
}

// SetCreated sets the "created" field.
func (wxu *WuXingUpdate) SetCreated(t time.Time) *WuXingUpdate {
	wxu.mutation.SetCreated(t)
	return wxu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableCreated(t *time.Time) *WuXingUpdate {
	if t != nil {
		wxu.SetCreated(*t)
	}
	return wxu
}

// ClearCreated clears the value of the "created" field.
func (wxu *WuXingUpdate) ClearCreated() *WuXingUpdate {
	wxu.mutation.ClearCreated()
	return wxu
}

// SetUpdated sets the "updated" field.
func (wxu *WuXingUpdate) SetUpdated(t time.Time) *WuXingUpdate {
	wxu.mutation.SetUpdated(t)
	return wxu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableUpdated(t *time.Time) *WuXingUpdate {
	if t != nil {
		wxu.SetUpdated(*t)
	}
	return wxu
}

// ClearUpdated clears the value of the "updated" field.
func (wxu *WuXingUpdate) ClearUpdated() *WuXingUpdate {
	wxu.mutation.ClearUpdated()
	return wxu
}

// SetDeleted sets the "deleted" field.
func (wxu *WuXingUpdate) SetDeleted(t time.Time) *WuXingUpdate {
	wxu.mutation.SetDeleted(t)
	return wxu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableDeleted(t *time.Time) *WuXingUpdate {
	if t != nil {
		wxu.SetDeleted(*t)
	}
	return wxu
}

// ClearDeleted clears the value of the "deleted" field.
func (wxu *WuXingUpdate) ClearDeleted() *WuXingUpdate {
	wxu.mutation.ClearDeleted()
	return wxu
}

// SetVersion sets the "version" field.
func (wxu *WuXingUpdate) SetVersion(i int) *WuXingUpdate {
	wxu.mutation.ResetVersion()
	wxu.mutation.SetVersion(i)
	return wxu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableVersion(i *int) *WuXingUpdate {
	if i != nil {
		wxu.SetVersion(*i)
	}
	return wxu
}

// AddVersion adds i to the "version" field.
func (wxu *WuXingUpdate) AddVersion(i int) *WuXingUpdate {
	wxu.mutation.AddVersion(i)
	return wxu
}

// ClearVersion clears the value of the "version" field.
func (wxu *WuXingUpdate) ClearVersion() *WuXingUpdate {
	wxu.mutation.ClearVersion()
	return wxu
}

// SetFirst sets the "first" field.
func (wxu *WuXingUpdate) SetFirst(s string) *WuXingUpdate {
	wxu.mutation.SetFirst(s)
	return wxu
}

// SetNillableFirst sets the "first" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableFirst(s *string) *WuXingUpdate {
	if s != nil {
		wxu.SetFirst(*s)
	}
	return wxu
}

// ClearFirst clears the value of the "first" field.
func (wxu *WuXingUpdate) ClearFirst() *WuXingUpdate {
	wxu.mutation.ClearFirst()
	return wxu
}

// SetSecond sets the "second" field.
func (wxu *WuXingUpdate) SetSecond(s string) *WuXingUpdate {
	wxu.mutation.SetSecond(s)
	return wxu
}

// SetNillableSecond sets the "second" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableSecond(s *string) *WuXingUpdate {
	if s != nil {
		wxu.SetSecond(*s)
	}
	return wxu
}

// ClearSecond clears the value of the "second" field.
func (wxu *WuXingUpdate) ClearSecond() *WuXingUpdate {
	wxu.mutation.ClearSecond()
	return wxu
}

// SetThird sets the "third" field.
func (wxu *WuXingUpdate) SetThird(s string) *WuXingUpdate {
	wxu.mutation.SetThird(s)
	return wxu
}

// SetNillableThird sets the "third" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableThird(s *string) *WuXingUpdate {
	if s != nil {
		wxu.SetThird(*s)
	}
	return wxu
}

// ClearThird clears the value of the "third" field.
func (wxu *WuXingUpdate) ClearThird() *WuXingUpdate {
	wxu.mutation.ClearThird()
	return wxu
}

// SetFortune sets the "fortune" field.
func (wxu *WuXingUpdate) SetFortune(s string) *WuXingUpdate {
	wxu.mutation.SetFortune(s)
	return wxu
}

// SetNillableFortune sets the "fortune" field if the given value is not nil.
func (wxu *WuXingUpdate) SetNillableFortune(s *string) *WuXingUpdate {
	if s != nil {
		wxu.SetFortune(*s)
	}
	return wxu
}

// ClearFortune clears the value of the "fortune" field.
func (wxu *WuXingUpdate) ClearFortune() *WuXingUpdate {
	wxu.mutation.ClearFortune()
	return wxu
}

// Mutation returns the WuXingMutation object of the builder.
func (wxu *WuXingUpdate) Mutation() *WuXingMutation {
	return wxu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wxu *WuXingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WuXingMutation](ctx, wxu.sqlSave, wxu.mutation, wxu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wxu *WuXingUpdate) SaveX(ctx context.Context) int {
	affected, err := wxu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wxu *WuXingUpdate) Exec(ctx context.Context) error {
	_, err := wxu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wxu *WuXingUpdate) ExecX(ctx context.Context) {
	if err := wxu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wxu *WuXingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wuxing.Table, wuxing.Columns, sqlgraph.NewFieldSpec(wuxing.FieldID, field.TypeString))
	if ps := wxu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wxu.mutation.Created(); ok {
		_spec.SetField(wuxing.FieldCreated, field.TypeTime, value)
	}
	if wxu.mutation.CreatedCleared() {
		_spec.ClearField(wuxing.FieldCreated, field.TypeTime)
	}
	if value, ok := wxu.mutation.Updated(); ok {
		_spec.SetField(wuxing.FieldUpdated, field.TypeTime, value)
	}
	if wxu.mutation.UpdatedCleared() {
		_spec.ClearField(wuxing.FieldUpdated, field.TypeTime)
	}
	if value, ok := wxu.mutation.Deleted(); ok {
		_spec.SetField(wuxing.FieldDeleted, field.TypeTime, value)
	}
	if wxu.mutation.DeletedCleared() {
		_spec.ClearField(wuxing.FieldDeleted, field.TypeTime)
	}
	if value, ok := wxu.mutation.Version(); ok {
		_spec.SetField(wuxing.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wxu.mutation.AddedVersion(); ok {
		_spec.AddField(wuxing.FieldVersion, field.TypeInt, value)
	}
	if wxu.mutation.VersionCleared() {
		_spec.ClearField(wuxing.FieldVersion, field.TypeInt)
	}
	if value, ok := wxu.mutation.First(); ok {
		_spec.SetField(wuxing.FieldFirst, field.TypeString, value)
	}
	if wxu.mutation.FirstCleared() {
		_spec.ClearField(wuxing.FieldFirst, field.TypeString)
	}
	if value, ok := wxu.mutation.Second(); ok {
		_spec.SetField(wuxing.FieldSecond, field.TypeString, value)
	}
	if wxu.mutation.SecondCleared() {
		_spec.ClearField(wuxing.FieldSecond, field.TypeString)
	}
	if value, ok := wxu.mutation.Third(); ok {
		_spec.SetField(wuxing.FieldThird, field.TypeString, value)
	}
	if wxu.mutation.ThirdCleared() {
		_spec.ClearField(wuxing.FieldThird, field.TypeString)
	}
	if value, ok := wxu.mutation.Fortune(); ok {
		_spec.SetField(wuxing.FieldFortune, field.TypeString, value)
	}
	if wxu.mutation.FortuneCleared() {
		_spec.ClearField(wuxing.FieldFortune, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wxu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wuxing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wxu.mutation.done = true
	return n, nil
}

// WuXingUpdateOne is the builder for updating a single WuXing entity.
type WuXingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WuXingMutation
}

// SetCreated sets the "created" field.
func (wxuo *WuXingUpdateOne) SetCreated(t time.Time) *WuXingUpdateOne {
	wxuo.mutation.SetCreated(t)
	return wxuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableCreated(t *time.Time) *WuXingUpdateOne {
	if t != nil {
		wxuo.SetCreated(*t)
	}
	return wxuo
}

// ClearCreated clears the value of the "created" field.
func (wxuo *WuXingUpdateOne) ClearCreated() *WuXingUpdateOne {
	wxuo.mutation.ClearCreated()
	return wxuo
}

// SetUpdated sets the "updated" field.
func (wxuo *WuXingUpdateOne) SetUpdated(t time.Time) *WuXingUpdateOne {
	wxuo.mutation.SetUpdated(t)
	return wxuo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableUpdated(t *time.Time) *WuXingUpdateOne {
	if t != nil {
		wxuo.SetUpdated(*t)
	}
	return wxuo
}

// ClearUpdated clears the value of the "updated" field.
func (wxuo *WuXingUpdateOne) ClearUpdated() *WuXingUpdateOne {
	wxuo.mutation.ClearUpdated()
	return wxuo
}

// SetDeleted sets the "deleted" field.
func (wxuo *WuXingUpdateOne) SetDeleted(t time.Time) *WuXingUpdateOne {
	wxuo.mutation.SetDeleted(t)
	return wxuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableDeleted(t *time.Time) *WuXingUpdateOne {
	if t != nil {
		wxuo.SetDeleted(*t)
	}
	return wxuo
}

// ClearDeleted clears the value of the "deleted" field.
func (wxuo *WuXingUpdateOne) ClearDeleted() *WuXingUpdateOne {
	wxuo.mutation.ClearDeleted()
	return wxuo
}

// SetVersion sets the "version" field.
func (wxuo *WuXingUpdateOne) SetVersion(i int) *WuXingUpdateOne {
	wxuo.mutation.ResetVersion()
	wxuo.mutation.SetVersion(i)
	return wxuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableVersion(i *int) *WuXingUpdateOne {
	if i != nil {
		wxuo.SetVersion(*i)
	}
	return wxuo
}

// AddVersion adds i to the "version" field.
func (wxuo *WuXingUpdateOne) AddVersion(i int) *WuXingUpdateOne {
	wxuo.mutation.AddVersion(i)
	return wxuo
}

// ClearVersion clears the value of the "version" field.
func (wxuo *WuXingUpdateOne) ClearVersion() *WuXingUpdateOne {
	wxuo.mutation.ClearVersion()
	return wxuo
}

// SetFirst sets the "first" field.
func (wxuo *WuXingUpdateOne) SetFirst(s string) *WuXingUpdateOne {
	wxuo.mutation.SetFirst(s)
	return wxuo
}

// SetNillableFirst sets the "first" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableFirst(s *string) *WuXingUpdateOne {
	if s != nil {
		wxuo.SetFirst(*s)
	}
	return wxuo
}

// ClearFirst clears the value of the "first" field.
func (wxuo *WuXingUpdateOne) ClearFirst() *WuXingUpdateOne {
	wxuo.mutation.ClearFirst()
	return wxuo
}

// SetSecond sets the "second" field.
func (wxuo *WuXingUpdateOne) SetSecond(s string) *WuXingUpdateOne {
	wxuo.mutation.SetSecond(s)
	return wxuo
}

// SetNillableSecond sets the "second" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableSecond(s *string) *WuXingUpdateOne {
	if s != nil {
		wxuo.SetSecond(*s)
	}
	return wxuo
}

// ClearSecond clears the value of the "second" field.
func (wxuo *WuXingUpdateOne) ClearSecond() *WuXingUpdateOne {
	wxuo.mutation.ClearSecond()
	return wxuo
}

// SetThird sets the "third" field.
func (wxuo *WuXingUpdateOne) SetThird(s string) *WuXingUpdateOne {
	wxuo.mutation.SetThird(s)
	return wxuo
}

// SetNillableThird sets the "third" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableThird(s *string) *WuXingUpdateOne {
	if s != nil {
		wxuo.SetThird(*s)
	}
	return wxuo
}

// ClearThird clears the value of the "third" field.
func (wxuo *WuXingUpdateOne) ClearThird() *WuXingUpdateOne {
	wxuo.mutation.ClearThird()
	return wxuo
}

// SetFortune sets the "fortune" field.
func (wxuo *WuXingUpdateOne) SetFortune(s string) *WuXingUpdateOne {
	wxuo.mutation.SetFortune(s)
	return wxuo
}

// SetNillableFortune sets the "fortune" field if the given value is not nil.
func (wxuo *WuXingUpdateOne) SetNillableFortune(s *string) *WuXingUpdateOne {
	if s != nil {
		wxuo.SetFortune(*s)
	}
	return wxuo
}

// ClearFortune clears the value of the "fortune" field.
func (wxuo *WuXingUpdateOne) ClearFortune() *WuXingUpdateOne {
	wxuo.mutation.ClearFortune()
	return wxuo
}

// Mutation returns the WuXingMutation object of the builder.
func (wxuo *WuXingUpdateOne) Mutation() *WuXingMutation {
	return wxuo.mutation
}

// Where appends a list predicates to the WuXingUpdate builder.
func (wxuo *WuXingUpdateOne) Where(ps ...predicate.WuXing) *WuXingUpdateOne {
	wxuo.mutation.Where(ps...)
	return wxuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wxuo *WuXingUpdateOne) Select(field string, fields ...string) *WuXingUpdateOne {
	wxuo.fields = append([]string{field}, fields...)
	return wxuo
}

// Save executes the query and returns the updated WuXing entity.
func (wxuo *WuXingUpdateOne) Save(ctx context.Context) (*WuXing, error) {
	return withHooks[*WuXing, WuXingMutation](ctx, wxuo.sqlSave, wxuo.mutation, wxuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wxuo *WuXingUpdateOne) SaveX(ctx context.Context) *WuXing {
	node, err := wxuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wxuo *WuXingUpdateOne) Exec(ctx context.Context) error {
	_, err := wxuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wxuo *WuXingUpdateOne) ExecX(ctx context.Context) {
	if err := wxuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wxuo *WuXingUpdateOne) sqlSave(ctx context.Context) (_node *WuXing, err error) {
	_spec := sqlgraph.NewUpdateSpec(wuxing.Table, wuxing.Columns, sqlgraph.NewFieldSpec(wuxing.FieldID, field.TypeString))
	id, ok := wxuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WuXing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wxuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wuxing.FieldID)
		for _, f := range fields {
			if !wuxing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wuxing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wxuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wxuo.mutation.Created(); ok {
		_spec.SetField(wuxing.FieldCreated, field.TypeTime, value)
	}
	if wxuo.mutation.CreatedCleared() {
		_spec.ClearField(wuxing.FieldCreated, field.TypeTime)
	}
	if value, ok := wxuo.mutation.Updated(); ok {
		_spec.SetField(wuxing.FieldUpdated, field.TypeTime, value)
	}
	if wxuo.mutation.UpdatedCleared() {
		_spec.ClearField(wuxing.FieldUpdated, field.TypeTime)
	}
	if value, ok := wxuo.mutation.Deleted(); ok {
		_spec.SetField(wuxing.FieldDeleted, field.TypeTime, value)
	}
	if wxuo.mutation.DeletedCleared() {
		_spec.ClearField(wuxing.FieldDeleted, field.TypeTime)
	}
	if value, ok := wxuo.mutation.Version(); ok {
		_spec.SetField(wuxing.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wxuo.mutation.AddedVersion(); ok {
		_spec.AddField(wuxing.FieldVersion, field.TypeInt, value)
	}
	if wxuo.mutation.VersionCleared() {
		_spec.ClearField(wuxing.FieldVersion, field.TypeInt)
	}
	if value, ok := wxuo.mutation.First(); ok {
		_spec.SetField(wuxing.FieldFirst, field.TypeString, value)
	}
	if wxuo.mutation.FirstCleared() {
		_spec.ClearField(wuxing.FieldFirst, field.TypeString)
	}
	if value, ok := wxuo.mutation.Second(); ok {
		_spec.SetField(wuxing.FieldSecond, field.TypeString, value)
	}
	if wxuo.mutation.SecondCleared() {
		_spec.ClearField(wuxing.FieldSecond, field.TypeString)
	}
	if value, ok := wxuo.mutation.Third(); ok {
		_spec.SetField(wuxing.FieldThird, field.TypeString, value)
	}
	if wxuo.mutation.ThirdCleared() {
		_spec.ClearField(wuxing.FieldThird, field.TypeString)
	}
	if value, ok := wxuo.mutation.Fortune(); ok {
		_spec.SetField(wuxing.FieldFortune, field.TypeString, value)
	}
	if wxuo.mutation.FortuneCleared() {
		_spec.ClearField(wuxing.FieldFortune, field.TypeString)
	}
	_node = &WuXing{config: wxuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wxuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wuxing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wxuo.mutation.done = true
	return _node, nil
}
