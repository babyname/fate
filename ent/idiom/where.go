// Code generated by ent, DO NOT EDIT.

package idiom

import (
	"entgo.io/ent/dialect/sql"
	"github.com/babyname/fate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldID, id))
}

// Word applies equality check predicate on the "word" field. It's identical to WordEQ.
func Word(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldWord, v))
}

// Derivation applies equality check predicate on the "derivation" field. It's identical to DerivationEQ.
func Derivation(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldDerivation, v))
}

// Explanation applies equality check predicate on the "explanation" field. It's identical to ExplanationEQ.
func Explanation(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldExplanation, v))
}

// Abbreviation applies equality check predicate on the "abbreviation" field. It's identical to AbbreviationEQ.
func Abbreviation(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldAbbreviation, v))
}

// Example applies equality check predicate on the "example" field. It's identical to ExampleEQ.
func Example(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldExample, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldComment, v))
}

// WordEQ applies the EQ predicate on the "word" field.
func WordEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldWord, v))
}

// WordNEQ applies the NEQ predicate on the "word" field.
func WordNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldWord, v))
}

// WordIn applies the In predicate on the "word" field.
func WordIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldWord, vs...))
}

// WordNotIn applies the NotIn predicate on the "word" field.
func WordNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldWord, vs...))
}

// WordGT applies the GT predicate on the "word" field.
func WordGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldWord, v))
}

// WordGTE applies the GTE predicate on the "word" field.
func WordGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldWord, v))
}

// WordLT applies the LT predicate on the "word" field.
func WordLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldWord, v))
}

// WordLTE applies the LTE predicate on the "word" field.
func WordLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldWord, v))
}

// WordContains applies the Contains predicate on the "word" field.
func WordContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldWord, v))
}

// WordHasPrefix applies the HasPrefix predicate on the "word" field.
func WordHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldWord, v))
}

// WordHasSuffix applies the HasSuffix predicate on the "word" field.
func WordHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldWord, v))
}

// WordEqualFold applies the EqualFold predicate on the "word" field.
func WordEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldWord, v))
}

// WordContainsFold applies the ContainsFold predicate on the "word" field.
func WordContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldWord, v))
}

// DerivationEQ applies the EQ predicate on the "derivation" field.
func DerivationEQ(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldDerivation, v))
}

// DerivationNEQ applies the NEQ predicate on the "derivation" field.
func DerivationNEQ(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldDerivation, v))
}

// DerivationIn applies the In predicate on the "derivation" field.
func DerivationIn(vs ...int) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldDerivation, vs...))
}

// DerivationNotIn applies the NotIn predicate on the "derivation" field.
func DerivationNotIn(vs ...int) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldDerivation, vs...))
}

// DerivationGT applies the GT predicate on the "derivation" field.
func DerivationGT(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldDerivation, v))
}

// DerivationGTE applies the GTE predicate on the "derivation" field.
func DerivationGTE(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldDerivation, v))
}

// DerivationLT applies the LT predicate on the "derivation" field.
func DerivationLT(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldDerivation, v))
}

// DerivationLTE applies the LTE predicate on the "derivation" field.
func DerivationLTE(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldDerivation, v))
}

// ExplanationEQ applies the EQ predicate on the "explanation" field.
func ExplanationEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldExplanation, v))
}

// ExplanationNEQ applies the NEQ predicate on the "explanation" field.
func ExplanationNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldExplanation, v))
}

// ExplanationIn applies the In predicate on the "explanation" field.
func ExplanationIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldExplanation, vs...))
}

// ExplanationNotIn applies the NotIn predicate on the "explanation" field.
func ExplanationNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldExplanation, vs...))
}

// ExplanationGT applies the GT predicate on the "explanation" field.
func ExplanationGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldExplanation, v))
}

// ExplanationGTE applies the GTE predicate on the "explanation" field.
func ExplanationGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldExplanation, v))
}

// ExplanationLT applies the LT predicate on the "explanation" field.
func ExplanationLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldExplanation, v))
}

// ExplanationLTE applies the LTE predicate on the "explanation" field.
func ExplanationLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldExplanation, v))
}

// ExplanationContains applies the Contains predicate on the "explanation" field.
func ExplanationContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldExplanation, v))
}

// ExplanationHasPrefix applies the HasPrefix predicate on the "explanation" field.
func ExplanationHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldExplanation, v))
}

// ExplanationHasSuffix applies the HasSuffix predicate on the "explanation" field.
func ExplanationHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldExplanation, v))
}

// ExplanationEqualFold applies the EqualFold predicate on the "explanation" field.
func ExplanationEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldExplanation, v))
}

// ExplanationContainsFold applies the ContainsFold predicate on the "explanation" field.
func ExplanationContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldExplanation, v))
}

// AbbreviationEQ applies the EQ predicate on the "abbreviation" field.
func AbbreviationEQ(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldAbbreviation, v))
}

// AbbreviationNEQ applies the NEQ predicate on the "abbreviation" field.
func AbbreviationNEQ(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldAbbreviation, v))
}

// AbbreviationIn applies the In predicate on the "abbreviation" field.
func AbbreviationIn(vs ...int) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldAbbreviation, vs...))
}

// AbbreviationNotIn applies the NotIn predicate on the "abbreviation" field.
func AbbreviationNotIn(vs ...int) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldAbbreviation, vs...))
}

// AbbreviationGT applies the GT predicate on the "abbreviation" field.
func AbbreviationGT(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldAbbreviation, v))
}

// AbbreviationGTE applies the GTE predicate on the "abbreviation" field.
func AbbreviationGTE(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldAbbreviation, v))
}

// AbbreviationLT applies the LT predicate on the "abbreviation" field.
func AbbreviationLT(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldAbbreviation, v))
}

// AbbreviationLTE applies the LTE predicate on the "abbreviation" field.
func AbbreviationLTE(v int) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldAbbreviation, v))
}

// ExampleEQ applies the EQ predicate on the "example" field.
func ExampleEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldExample, v))
}

// ExampleNEQ applies the NEQ predicate on the "example" field.
func ExampleNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldExample, v))
}

// ExampleIn applies the In predicate on the "example" field.
func ExampleIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldExample, vs...))
}

// ExampleNotIn applies the NotIn predicate on the "example" field.
func ExampleNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldExample, vs...))
}

// ExampleGT applies the GT predicate on the "example" field.
func ExampleGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldExample, v))
}

// ExampleGTE applies the GTE predicate on the "example" field.
func ExampleGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldExample, v))
}

// ExampleLT applies the LT predicate on the "example" field.
func ExampleLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldExample, v))
}

// ExampleLTE applies the LTE predicate on the "example" field.
func ExampleLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldExample, v))
}

// ExampleContains applies the Contains predicate on the "example" field.
func ExampleContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldExample, v))
}

// ExampleHasPrefix applies the HasPrefix predicate on the "example" field.
func ExampleHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldExample, v))
}

// ExampleHasSuffix applies the HasSuffix predicate on the "example" field.
func ExampleHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldExample, v))
}

// ExampleEqualFold applies the EqualFold predicate on the "example" field.
func ExampleEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldExample, v))
}

// ExampleContainsFold applies the ContainsFold predicate on the "example" field.
func ExampleContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldExample, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldComment, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(func(s *sql.Selector) {
		p(s.Not())
	})
}
