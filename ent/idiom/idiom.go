// Code generated by ent, DO NOT EDIT.

package idiom

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the idiom type in the database.
	Label = "idiom"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPinYin holds the string denoting the pin_yin field in the database.
	FieldPinYin = "pin_yin"
	// FieldWord holds the string denoting the word field in the database.
	FieldWord = "word"
	// FieldDerivation holds the string denoting the derivation field in the database.
	FieldDerivation = "derivation"
	// FieldExplanation holds the string denoting the explanation field in the database.
	FieldExplanation = "explanation"
	// FieldAbbreviation holds the string denoting the abbreviation field in the database.
	FieldAbbreviation = "abbreviation"
	// FieldExample holds the string denoting the example field in the database.
	FieldExample = "example"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// Table holds the table name of the idiom in the database.
	Table = "idioms"
)

// Columns holds all SQL columns for idiom fields.
var Columns = []string{
	FieldID,
	FieldPinYin,
	FieldWord,
	FieldDerivation,
	FieldExplanation,
	FieldAbbreviation,
	FieldExample,
	FieldComment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Idiom queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWord orders the results by the word field.
func ByWord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWord, opts...).ToFunc()
}

// ByDerivation orders the results by the derivation field.
func ByDerivation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDerivation, opts...).ToFunc()
}

// ByExplanation orders the results by the explanation field.
func ByExplanation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExplanation, opts...).ToFunc()
}

// ByAbbreviation orders the results by the abbreviation field.
func ByAbbreviation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbbreviation, opts...).ToFunc()
}

// ByExample orders the results by the example field.
func ByExample(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExample, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}
